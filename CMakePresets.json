{
  "version": 7,
  "cmakeMinimumRequired": {
    "major": 3,
    "minor": 27,
    "patch": 0
  },
  "configurePresets": [
    {
      "name": "base",
      "hidden": true,
      "generator": "Ninja",
      "binaryDir": "${sourceDir}/build/${presetName}",
      "cacheVariables": {
        "CMAKE_BUILD_TYPE": "Debug",
        "CMAKE_EXPORT_COMPILE_COMMANDS": true,
        "CMAKE_VERBOSE_MAKEFILE": false,
        "CMAKE_POLICY_DEFAULT_CMP0123": "NEW",
        "eFLL_BUILD_EXAMPLES": false,
        "eFLL_BUILD_TESTS": false,
        "eFLL_BUILD_DOCS": false,
        "eFLL_ENABLE_CLANG_TIDY": false,
        "eFLL_ENABLE_CODE_COVERAGE": false
      },
      "vendor": {
        "microsoft.com/VisualStudioSettings/CMake/1.0": {
          "intelliSenseMode": "linux-gcc-arm"
        }
      }
    },
    {
      "name": "base-host",
      "hidden": true,
      "description": "Base configuration for host development",
      "inherits": "base",
      "cacheVariables": {
        "eFLL_BUILD_HOSTED": true,
        "eFLL_BUILD_TESTS": true
      }
    },
    {
      "name": "base-host-clang",
      "hidden": true,
      "description": "Base configuration for host development with Clang/LLVM",
      "inherits": "base-host",
      "cacheVariables": {
        "CMAKE_CXX_COMPILER": "clang++",
        "CMAKE_C_COMPILER": "clang",
        "CMAKE_INSTALL_PREFIX": "${sourceDir}/build/install",
        "eFLL_ENABLE_CODE_COVERAGE": false
      }
    },
    {
      "name": "base-target",
      "hidden": true,
      "description": "On-target configuration baseline",
      "inherits": "base",
      "cacheVariables": {
        "eFLL_BUILD_EMBEDDED": true,
        "eFLL_BUILD_EXAMPLES": true,
        "TOOLCHAIN_DISABLE_RTTI": true,
        "TOOLCHAIN_DISABLE_EXCEPTIONS": true,
        "TOOLCHAIN_ENABLE_LTO": false
      }
    },
    {
      "name": "target-gcc",
      "hidden": true,
      "description": "On-target GCC baseline",
      "inherits": "base-target"
    },
    {
      "name": "gcc-none-eabi",
      "displayName": "Embedded GCC",
      "description": "Embedded development with GCC",
      "inherits": "target-gcc",
      "toolchainFile": "${sourceDir}/cmake/toolchains/gcc/gcc_arm_m33_toolchain.cmake",
      "cacheVariables": {
        "TOOLCHAIN_OPTIMIZATION_FLAG": "-Og",
        "eFLL_BUILD_EXAMPLES": false
      }
    },
    {
      "name": "arm32-stm32u575-none-gcc",
      "displayName": "STM32U575/GCC",
      "description": "STM32U575 development with GCC",
      "inherits": "target-gcc",
      "toolchainFile": "${sourceDir}/cmake/toolchains/gcc/gcc_arm_m33_toolchain.cmake",
      "cacheVariables": {
        "TOOLCHAIN_OPTIMIZATION_FLAG": "-Og",
        "eFLL_BUILD_EXAMPLES": false
      }
    },
    {
      "name": "x64-pc-windows-msvc",
      "displayName": "Windows/MSVC",
      "description": "Hosted development with MSVC",
      "inherits": "base-host",
      "toolchainFile": "${sourceDir}/cmake/toolchains/msvc/Windows.MSVC.toolchain.cmake",
      "cacheVariables": {
        "eFLL_ENABLE_CODE_COVERAGE": false,
        "eFLL_ENABLE_CLANG_TIDY": false
      }
    },
    {
      "name": "x64-pc-windows-msvc-clangtidy",
      "displayName": "Windows/MSVC + Clang-Tidy",
      "description": "Hosted development with MSVC and Clang-Tidy",
      "inherits": "x64-pc-windows-msvc",
      "cacheVariables": {
        "eFLL_ENABLE_CODE_COVERAGE": true,
        "eFLL_ENABLE_CLANG_TIDY": true
      }
    },
    {
      "name": "x64-pc-windows-clang",
      "displayName": "Windows/Clang",
      "description": "Hosted development with Clang",
      "inherits": "base-host-clang",
      "cacheVariables": {
        "eFLL_ENABLE_CODE_COVERAGE": true
      },
      "condition": {
        "type": "equals",
        "lhs": "${hostSystemName}",
        "rhs": "Windows"
      }
    },
    {
      "name": "x64-unknown-unix-clang",
      "displayName": "*nix/Clang",
      "description": "Hosted development with Clang, on a Unix-ish system",
      "inherits": "base-host-clang",
      "cacheVariables": {
        "eFLL_ENABLE_CODE_COVERAGE": false
      },
      "condition": {
        "type": "notEquals",
        "lhs": "${hostSystemName}",
        "rhs": "Windows"
      }
    },
    {
      "name": "x64-pc-windows-clang-clangtidy",
      "displayName": "Windows/Clang + Clang-Tidy",
      "description": "Hosted development with Clang and Clang-Tidy",
      "inherits": "x64-pc-windows-clang",
      "cacheVariables": {
        "eFLL_ENABLE_CLANG_TIDY": true
      }
    },
    {
      "name": "x64-unknown-unix-clang-clangtidy",
      "displayName": "*nix/Clang + Clang-Tidy",
      "description": "Hosted development with Clang and Clang-Tidy",
      "inherits": "x64-unknown-unix-clang",
      "cacheVariables": {
        "eFLL_ENABLE_CLANG_TIDY": true
      }
    }
  ],
  "buildPresets": [
    {
      "name": "default",
      "displayName": "Default build",
      "description": "Builds the default target",
      "configurePreset": "x64-pc-windows-msvc",
      "targets": ["all"]
    },
    {
      "name": "clang",
      "displayName": "Build with Clang",
      "description": "Builds the default target with Clang",
      "configurePreset": "x64-pc-windows-clang-clangtidy",
      "inherits": "default"
    },
    {
      "name": "gcc",
      "displayName": "Build with GCC",
      "description": "Builds the default target with GCC",
      "configurePreset": "gcc-none-eabi",
      "inherits": "default"
    },
    {
      "name": "stm32u575",
      "displayName": "Build for STM32U575",
      "description": "Builds the default target for STM32U575",
      "configurePreset": "arm32-stm32u575-none-gcc",
      "inherits": "default"
    }
  ],
  "testPresets": [
    {
      "name": "base",
      "displayName": "All unit tests",
      "description": "Provides every test defined",
      "configurePreset": "x64-pc-windows-msvc",
      "output": {
        "shortProgress": true
      }
    },
    {
      "name": "clang",
      "displayName": "Unit tests, built with Clang",
      "description": "Provides every test defined, using Clang",
      "configurePreset": "x64-pc-windows-clang-clangtidy",
      "inherits": "base"
    }
  ]
}
