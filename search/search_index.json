{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"eFLL-Reborn (Embedded Fuzzy Logic Library Reborn)","text":"<p>eFLL-Reborn is an updated take on the original eFLL with the intention of bringing the abandoned library back to life with some needed quality-of-life improvements.</p>"},{"location":"#development-setup","title":"Development Setup","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Install LLVM - Version 18 or greater</li> <li>(Optional) Install MSVC</li> <li>(Optional) Install GCC</li> <li>Code Editor (VSCode suggested)</li> </ul> <p>The optional installs can be used to validate cross-compilation, but only <code>clang</code> is neccessary.</p>"},{"location":"#whats-different","title":"What's Different?","text":"<p>The two largest differences is that the project now targets C++14 and the integration of CMake.</p>"},{"location":"#c14","title":"C++14","text":"<p>The previous library, while only including , was always compiling in C++. As it wasn't a static library, it never truly supported C. <p>I've dropped the pretense entirerly.</p> <p>eFLL-Reborn now targets C++14 as a library standard. Because most modern embedded compilers support a minimum of C++14, I'm targeting the lowest common denominator.</p>"},{"location":"#cmake","title":"CMake","text":"<p>Packaging C++ libraries and applications has come a long way in the years since eFLL was published and abandoned. Now most C++ project leverage CMake at least to some extent.</p> <p>eFLL-Reborn takes the original implementation and wraps it in CMake, making it much easier to add to existing C++ applications already using CMake.</p>"},{"location":"#improvements","title":"Improvements","text":"<p>Support for clang-tidy and clang-format have come to the library as well, which has highlighted numerous issues with the original eFLL. Reborn will clean up these issues as much as possible while retaining the original spirit and functionality of eFLL.</p>"},{"location":"#actual-support","title":"Actual Support","text":"<p>Use of fuzzy logic in small, embedded packages is on the rise. I hope to foster a growing community of contributers and supporters to make embedded fuzzy logic easy for all developers and companies.</p>"},{"location":"#whats-the-same","title":"What's the Same?","text":""},{"location":"#same-api","title":"Same API","text":"<p>One of the core philosophies I had while forking and maintaining this project was to make it easy to shift from the old eFLL library to Reborn.</p> <p>My intent is that the original API will not change.</p>"},{"location":"#same-core-infrastructure","title":"Same Core Infrastructure","text":"<p>Similar to keeping the API, I hope to keep the general performance and behavior of the library on par if not better than the original eFLL.</p> <p>Favoring consistency and predictability over optimizations, Reborn intends to keep the core business logic intact.</p>"},{"location":"#characteristics","title":"Characteristics","text":"<p>It has no explicit limitations on quantity of Fuzzy, Fuzzy Rules, Inputs or Outputs, these limited processing power and storage of each microcontroller</p> <p>It uses the process:</p> <p>(MAX-MIN) and (Mamdani Minimum) for inference and composition, (CENTER OF AREA) to defuzzification in a continuous universe.</p> <p>Tested with GTest for C, Google Inc.</p>"},{"location":"#special-thanks-to-contributers","title":"Special Thanks to Contributers","text":"<p>@benvoliobenji, @stanczyk4, @myrrlyn</p>"},{"location":"#original-efll-authors","title":"Original eFLL Authors","text":"<p>Authors: AJ Alves aj.alves@zerokol.com; Co authors: Dr. Ricardo Lira ricardor_usp@yahoo.com.br, Msc. Marvin Lemos marvinlemos@gmail.com, Douglas S. Kridi douglaskridi@gmail.com, Kannya Leal kannyal@hotmail.com</p>"},{"location":"#license","title":"LICENSE","text":"<p>MIT License</p>"},{"location":"pages/class-diagram/","title":"Class Diagram","text":"<pre><code>---\ntitle: eFLL Class Diagram\n---\nclassDiagram\n    class FuzzyInput {\n        +FuzzyInput()\n        +FuzzyInputIndex(index: int)\n        +calculateFuzzySetPertinences() bool\n    }\n    class FuzzyIO {\n        -index int\n        -crispInput float\n        -fuzzySets fuzzySetArray*\n        +FuzzyIO()\n        +FuzzyIO(index: int)\n        +getIndex() int\n        +setCrispInput(crispInput: float)\n        +getCrispInput() float\n        +addFuzzySet(fuzzySet: FuzzySet*) bool\n        +resetFuzzySets()\n        -cleanFuzzySets(aux: fuzzySetArray*)\n    }\n    class FuzzySet {\n        -a float\n        -b float\n        -c float\n        -d float\n        -pertinance float\n        +FuzzySet()\n        +FuzzySet(a: float, b: float, c: float, d: float)\n        +getPointA() float\n        +getPointB() float\n        +getPointC() float\n        +getPointD() float\n        +calculatePertinence(crispValue: float) bool\n        +setPertinence(pertinence: float)\n        +getPertinence() float\n        +reset()\n    }\n    class FuzzyOutput {\n        -fuzzyComposition FuzzyComposition*\n        +FuzzyOutput()\n        +FuzzyOutput(index: int)\n        +truncate() bool\n        +getCrispOutput() float\n        +order() bool\n        +getFuzzyComposition() FuzzyComposition*\n        -swap(fuzzySetA: fuzzySetArray*, fuzzySetB: fuzzySetArray*) bool\n        -rebuild(x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, x4: float, y4: float, point: float*, pertinence: float*) bool\n    }\n    class FuzzyComposition {\n        -points: pointsArray*\n        +FuzzyComposition()\n        +addPoint(point: float, pertinence: float) bool\n        +checkPoint(point: float, pertinence: float) bool\n        +build() bool\n        +calculate() float\n        +empty() bool\n        +countPoint() int\n        -cleanPoints(aux: pointsArray*)\n        -rebuild(aSegmentBegin: pointsArray*, aSegmentEnd: pointsArray*, bSegmentBegin: pointsArray*, bSegmentEnd: pointsArray*) bool\n        -rmvPoint(point: pointsArray*) bool\n    }\n    class FuzzyRuleAntecedent {\n        -op int\n        -mode int\n        -fuzzySet1 FuzzySet*\n        -fuzzySet2 FuzzySet*\n        -fuzzyRuleAntecedent1 FuzzyRuleAntecedent*\n        -fuzzyRuleAntecedent2 FuzzyRuleAntecedent*\n        +FuzzyRuleAntecedent()\n        +joinSingle(fuzzySet: FuzzySet*) bool\n        +joinWithAND(fuzzySet1: FuzzySet*, fuzzySet2: FuzzySet*) bool\n        +joinWithOR(fuzzySet1: FuzzySet*, fuzzySet2: FuzzySet*) bool\n        +joinWithAND(fuzzySet: FuzzySet*, fuzzyRuleAntecedent: FuzzyRuleAntecedent*) bool\n        +joinWithAND(fuzzyRuleAntecedent: FuzzyRuleAntecedent*, fuzzySet: FuzzySet*) bool\n        +joinWithOR(fuzzySet: FuzzySet*, fuzzyRuleAntecedent: FuzzyRuleAntecedent*) bool\n        +joinWithOR(fuzzyRuleAntecedent: FuzzyRuleAntecedent*, fuzzySet: FuzzySet*) bool\n        +evaluate() float\n    }\n    class FuzzyRuleConsequent {\n        -fuzzySetOutputs: fuzzySetOutputArray*\n        +FuzzyRuleConsequent()\n        +addOutput(fuzzySet: FuzzySet*) bool\n        +evaluate(power: float) bool\n        -cleanFuzzySets(aux: fuzzySetOutputsArray*)\n    }\n    class FuzzyRule {\n        -index int\n        -fired bool\n        -fuzzyRuleAntecedent FuzzyRuleAntecedent*\n        -fuzzyRuleConsequent FuzzyRuleConsequent*\n        +FuzzyRule()\n        +FuzzyRule(index: int, fuzzyRuleAntecedent: FuzzyRuleAntecedent*, fuzzyRuleConsequent: FuzzyRuleConsequent*)\n        +getIndex() int\n        +evaluateExpression() bool\n        +isFired() bool\n    }\n    class Fuzzy {\n        -fuzzyInputs fuzzyInputArray*\n        -fuzzyOutputs fuzzyOutputArray*\n        -fuzzyRules fuzzyRuleArray*\n        +Fuzzy()\n        +addFuzzyInput(fuzzyInput: FuzzyInput*) bool\n        +addFuzzyOutput(fuzzyOutput: FuzzyOutput*) bool\n        +addFuzzyRule(fuzzyRule: FuzzyRule*) bool\n        +setInput(fuzzyInputIndex: int, crispValue: float) bool\n        +fuzzify() bool\n        +isFiredRule(fuzzyRuleIndex: int) bool\n        +defuzzify(fuzzyOutputIndex: int) float\n        -cleanFuzzyInputs(aux: fuzzyInputArray*)\n        -cleanFuzzyOutputs(aux: fuzzyOutputArray*)\n        -cleanFuzzyRules(aux: fuzzyRuleArray*)\n    }\n    FuzzyIO &lt;|-- FuzzyInput\n    FuzzyIO &lt;|-- FuzzyOutput\n    FuzzyOutput *-- FuzzyComposition\n    FuzzyIO *-- FuzzySet\n    FuzzyRuleAntecedent *-- FuzzySet\n    FuzzyRuleConsequent *-- FuzzySet\n    FuzzyRule *-- FuzzyRuleAntecedent\n    FuzzyRule *-- FuzzyRuleConsequent\n    Fuzzy *-- FuzzyInput\n    Fuzzy *-- FuzzyOutput\n    Fuzzy *-- FuzzyRule</code></pre>"},{"location":"pages/integrating/","title":"Integrating","text":"<p>There are a few ways to integrate eFLL-Reborn into your project.</p>"},{"location":"pages/integrating/#how-to-install-using-cpm","title":"How to install (using CPM)","text":"<p>In whatever CMake file you add your third-party projects:</p> Text Only<pre><code>CPMAddPackage(\n    NAME \"eFLL\"\n    GIT_REPOSITORY https://github.com/benvoliobenji/eFLL-Reborn\n    GIT_TAG {tag or branch}\n)\n</code></pre>"},{"location":"pages/integrating/#how-to-install-general-use","title":"How to install (general use)","text":"<p>Step 1: Go to the official project page on GitHub (Here)</p> <p>Step 2: Make a clone of the project using Git or download at Download on the button \"Download as zip.\"</p> <p>Step 3: Clone or unzip (For safety, rename the folder to \"eFLL\") the files into some folder</p> <p>Step 4: Compile and link it to your code (See Makefile)</p>"},{"location":"pages/usage/","title":"Usage","text":"<p>While the detailed API documentation can be found under the API tab, here are a few pointers.</p>"},{"location":"pages/usage/#brief-overview","title":"Brief Overview","text":"<p>Fuzzy object - This object includes all the Fuzzy System, through it, you can manipulate the Fuzzy Sets, Linguistic Rules, inputs and outputs.</p> <p>FuzzyInput object - This object groups all entries Fuzzy Sets that belongs to the same domain.</p> <p>FuzzyOutput object - This object is similar to FuzzyInput, is used to group all output Fuzzy Sets thar belongs to the same domain.</p> <p>FuzzySet object - This is one of the main objects of Fuzzy Library, with each set is possible to model the system in question. Currently the library supports triangular membership functions, trapezoidal and singleton, which are assembled based on points A, B, C and D, they are passed by parameter in its constructor FuzzySet(float a, float b, float c, float d).</p> <p>FuzzyRule object - This object is used to mount the base rule of Fuzzy object, which contains one or more of this object. Instantiated with FuzzyRule fr = new FuzzyRule (ID, antecedent, consequent).</p> <p>FuzzyRuleAntecedent object - This object is used to compound the object FuzzyRule, responsible for assembling the antecedent of the conditional expression of a FuzzyRule.</p> <p>FuzzyRuleConsequent object - This object is used to render the object FuzzyRule, responsible for assembling the output expression of a FuzzyRule.</p>"},{"location":"pages/usage/#tips","title":"Tips","text":"<p>These are all eFLL library objects that are used in the process. The next step, generally interactive is handled by three methods of the Fuzzy Class first:</p> <p><code>bool setInput(int id, float value);</code></p> <p>It is used to pass the Crispe input value to the system note that the first parameter is the FuzzyInput object' ID which parameter value is intended.</p> <p><code>bool fuzzify();</code></p> <p>It is used to start the fuzzification process, composition and inference.</p> <p>And finally:</p> <p><code>float defuzzify(int id);</code></p>"},{"location":"eFLL-Reborn/annotated/","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>class Fuzzy The main class of the eFLL library. This class is responsible for managing the fuzzy logic system. From adding inputs and outputs to the system, to defining rules and calculating the output. </li> <li>class FuzzyComposition A class to manage the composition of points and pertinences for a FuzzyOutput . </li> <li>class FuzzyIO Class to manage fuzzy inputs and outputs. Base class for FuzzyInput andFuzzyOutput . </li> <li>class FuzzyInput Class to manage fuzzy inputs. </li> <li>class FuzzyOutput Class to manage fuzzy outputs. </li> <li>class FuzzyRule Class to manage fuzzy rules. </li> <li>class FuzzyRuleAntecedent Class to manage the antecedent of a fuzzy rule. </li> <li>class FuzzyRuleConsequent Class to manage the consequent of a fuzzy rule. </li> <li>class FuzzySet A class to manage a fuzzy set (shape) </li> <li>struct fuzzyInputArray Linked list struct for FuzzyInput objects. </li> <li>struct fuzzyOutputArray Linked list struct for FuzzyOutput objects. </li> <li>struct fuzzyRuleArray Linked list struct for FuzzyRule objects. </li> <li>struct fuzzySetArray Linked list struct for FuzzySet objects. </li> <li>struct fuzzySetOutputArray Linked list struct for FuzzySet objects. </li> <li>struct pointsArray Linked list struct for a point and its pertinence. </li> </ul>"},{"location":"eFLL-Reborn/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir include <ul> <li>dir eFLL <ul> <li>file Fuzzy.h </li> <li>file FuzzyComposition.h </li> <li>file FuzzyIO.h </li> <li>file FuzzyInput.h </li> <li>file FuzzyOutput.h </li> <li>file FuzzyRule.h </li> <li>file FuzzyRuleAntecedent.h </li> <li>file FuzzyRuleConsequent.h </li> <li>file FuzzySet.h </li> </ul> </li> </ul> </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy/","title":"Class Fuzzy","text":"<p>ClassList &gt; Fuzzy</p> <p>The main class of the eFLL library. This class is responsible for managing the fuzzy logic system. From adding inputs and outputs to the system, to defining rules and calculating the output. </p> <ul> <li><code>#include &lt;Fuzzy.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy/#public-functions","title":"Public Functions","text":"Type Name Fuzzy () Default constructor. bool addFuzzyInput (FuzzyInput * fuzzyInput) Add a new FuzzyInput to the fuzzy logic system. bool addFuzzyOutput (FuzzyOutput * fuzzyOutput) Add a new FuzzyOutput to the fuzzy logic system. bool addFuzzyRule (FuzzyRule * fuzzyRule) Add a new FuzzyRule to the fuzzy logic system. float defuzzify (int fuzzyOutputIndex) Defuzzify the output of a FuzzyOutput at the provided index. bool fuzzify () Calculate and store the result of a fuzzification for each FuzzyOutput given the current crisp values of the FuzzyInputs and the rules provided to the system. bool isFiredRule (int fuzzyRuleIndex) Check if the FuzzyRule at the provided index was triggered durring fuzzification. bool setInput (int fuzzyInputIndex, float crispValue) Set the crisp value of the FuzzyInput at the provided index. The crisp value is the value that theFuzzyInput will be evaluated against to determine the pertinence of the FuzzySets in the input. ~Fuzzy () Default destructor."},{"location":"eFLL-Reborn/class_fuzzy/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"eFLL-Reborn/class_fuzzy/#function-fuzzy","title":"function Fuzzy","text":"<p>Default constructor. C++<pre><code>Fuzzy::Fuzzy () \n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy/#function-addfuzzyinput","title":"function addFuzzyInput","text":"<p>Add a new FuzzyInput to the fuzzy logic system. C++<pre><code>bool Fuzzy::addFuzzyInput (\n    FuzzyInput * fuzzyInput\n) \n</code></pre></p> <p>Note:</p> <p>will malloc a new fuzzyInputArray struct and add it to the linked list of fuzzyInputs. Uses the provided pointer to the FuzzyInput object as the fuzzyInput member of the new fuzzyInputArray struct.</p> <p>Parameters:</p> <ul> <li><code>fuzzyInput</code> Pointer to the FuzzyInput object to add to the system. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzyInput was added successfully. </li> <li><code>false</code> if the FuzzyInput could not be added or memory could not be allocated to add the new input. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy/#function-addfuzzyoutput","title":"function addFuzzyOutput","text":"<p>Add a new FuzzyOutput to the fuzzy logic system. C++<pre><code>bool Fuzzy::addFuzzyOutput (\n    FuzzyOutput * fuzzyOutput\n) \n</code></pre></p> <p>Note:</p> <p>will malloc a new fuzzyOutputArray struct and add it to the linked list of fuzzyOutputs. Uses the provided pointer to the FuzzyOutput object as the fuzzyOutput member of the new fuzzyOutputArray struct.</p> <p>Parameters:</p> <ul> <li><code>fuzzyOutput</code> Pointer to the FuzzyOutput object to add to the system. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzyOutput was added successfully. </li> <li><code>false</code> if the FuzzyOutput could not be added or memory could not be allocated to add the new output. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy/#function-addfuzzyrule","title":"function addFuzzyRule","text":"<p>Add a new FuzzyRule to the fuzzy logic system. C++<pre><code>bool Fuzzy::addFuzzyRule (\n    FuzzyRule * fuzzyRule\n) \n</code></pre></p> <p>Note:</p> <p>will malloc a new fuzzyRuleArray struct and add it to the linked list of fuzzyRules. Uses the provided pointer to the FuzzyRule object as the fuzzyRule member of the new fuzzyRuleArray struct.</p> <p>Parameters:</p> <ul> <li><code>fuzzyRule</code> Pointer to the FuzzyRule object to add to the system. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzyRule was added successfully. </li> <li><code>false</code> if the FuzzyRule could not be added or memory could not be allocated to add the new rule. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy/#function-defuzzify","title":"function defuzzify","text":"<p>Defuzzify the output of a FuzzyOutput at the provided index. C++<pre><code>float Fuzzy::defuzzify (\n    int fuzzyOutputIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>fuzzyOutputIndex</code> Index of the FuzzyOutput to defuzzify. </li> </ul> <p>Returns:</p> <p>float The result of fuzzification for that FuzzyOutput. </p>"},{"location":"eFLL-Reborn/class_fuzzy/#function-fuzzify","title":"function fuzzify","text":"<p>Calculate and store the result of a fuzzification for each FuzzyOutput given the current crisp values of the FuzzyInputs and the rules provided to the system. C++<pre><code>bool Fuzzy::fuzzify () \n</code></pre></p> <p>Returns:</p> <p>true will always return true. </p>"},{"location":"eFLL-Reborn/class_fuzzy/#function-isfiredrule","title":"function isFiredRule","text":"<p>Check if the FuzzyRule at the provided index was triggered durring fuzzification. C++<pre><code>bool Fuzzy::isFiredRule (\n    int fuzzyRuleIndex\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>fuzzyRuleIndex</code> Index of the FuzzyRule to check. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzyRule was triggered. </li> <li><code>false</code> if the FuzzyRule was not triggered. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy/#function-setinput","title":"function setInput","text":"<p>Set the crisp value of the FuzzyInput at the provided index. The crisp value is the value that theFuzzyInput will be evaluated against to determine the pertinence of the FuzzySets in the input. C++<pre><code>bool Fuzzy::setInput (\n    int fuzzyInputIndex,\n    float crispValue\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>fuzzyInputIndex</code> Index of the FuzzyInput to set the crisp value for. </li> <li><code>crispValue</code> The crisp value to set for the FuzzyInput. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the crisp value was set successfully. </li> <li><code>false</code> if the FuzzyInput at the provided index could not be found. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy/#function-fuzzy_1","title":"function ~Fuzzy","text":"<p>Default destructor. C++<pre><code>Fuzzy::~Fuzzy () \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>include/eFLL/Fuzzy.h</code></p>"},{"location":"eFLL-Reborn/class_fuzzy_composition/","title":"Class FuzzyComposition","text":"<p>ClassList &gt; FuzzyComposition</p> <p>A class to manage the composition of points and pertinences for a FuzzyOutput .</p> <ul> <li><code>#include &lt;FuzzyComposition.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_composition/#public-functions","title":"Public Functions","text":"Type Name FuzzyComposition () Default constructor. bool addPoint (float point, float pertinence) Adds a new point and its pertinence to the FuzzyComposition . bool build () Builds the FuzzyComposition by sorting the points in the list and correcting any intersections. float calculate () Calculates the centroid of the FuzzyComposition . bool checkPoint (float point, float pertinence) Checks if a point and if its pertinence is in the FuzzyComposition . int countPoints () Counts the amount of points used in this FuzzyComposition . bool empty () Resets the FuzzyComposition by deallocating all points in the list. ~FuzzyComposition () Default destructor."},{"location":"eFLL-Reborn/class_fuzzy_composition/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"eFLL-Reborn/class_fuzzy_composition/#function-fuzzycomposition","title":"function FuzzyComposition","text":"<p>Default constructor. C++<pre><code>FuzzyComposition::FuzzyComposition () \n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_composition/#function-addpoint","title":"function addPoint","text":"<p>Adds a new point and its pertinence to the FuzzyComposition . C++<pre><code>bool FuzzyComposition::addPoint (\n    float point,\n    float pertinence\n) \n</code></pre></p> <p>Note:</p> <p>Will malloc a new pointsArray struct and add it to the linked list of points. Uses the provided point and pertinence values to populate the new pointsArray struct.</p> <p>Parameters:</p> <ul> <li><code>point</code> The point to add to the FuzzyComposition. </li> <li><code>pertinence</code> The pertinence of the point to add to the FuzzyComposition. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the point was added successfully. </li> <li><code>false</code> if the point could not be added or memory could not be allocated to add the new point. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_composition/#function-build","title":"function build","text":"<p>Builds the FuzzyComposition by sorting the points in the list and correcting any intersections. C++<pre><code>bool FuzzyComposition::build () \n</code></pre></p> <p>Returns:</p> <p>true always returns true. </p>"},{"location":"eFLL-Reborn/class_fuzzy_composition/#function-calculate","title":"function calculate","text":"<p>Calculates the centroid of the FuzzyComposition . C++<pre><code>float FuzzyComposition::calculate () \n</code></pre></p> <p>Returns:</p> <p>float the centroid of the FuzzyComposition. </p>"},{"location":"eFLL-Reborn/class_fuzzy_composition/#function-checkpoint","title":"function checkPoint","text":"<p>Checks if a point and if its pertinence is in the FuzzyComposition . C++<pre><code>bool FuzzyComposition::checkPoint (\n    float point,\n    float pertinence\n) \n</code></pre></p> <p>Note:</p> <p>this checks for exact matches of the point and pertinence in the FuzzyComposition.</p> <p>Parameters:</p> <ul> <li><code>point</code> The point to check for in the FuzzyComposition. </li> <li><code>pertinence</code> The pertinence of the point to check for in the FuzzyComposition. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the point and pertinence are in the FuzzyComposition. </li> <li><code>false</code> if the point and pertinence are not in the FuzzyComposition. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_composition/#function-countpoints","title":"function countPoints","text":"<p>Counts the amount of points used in this FuzzyComposition . C++<pre><code>int FuzzyComposition::countPoints () \n</code></pre></p> <p>Returns:</p> <p>int the amount of points in the FuzzyComposition. </p>"},{"location":"eFLL-Reborn/class_fuzzy_composition/#function-empty","title":"function empty","text":"<p>Resets the FuzzyComposition by deallocating all points in the list. C++<pre><code>bool FuzzyComposition::empty () \n</code></pre></p> <p>Note:</p> <p>will call free() on each pointsArray struct in the linked list of points.</p> <p>Returns:</p> <p>true always returns true. </p>"},{"location":"eFLL-Reborn/class_fuzzy_composition/#function-fuzzycomposition_1","title":"function ~FuzzyComposition","text":"<p>Default destructor. C++<pre><code>FuzzyComposition::~FuzzyComposition () \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyComposition.h</code></p>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/","title":"Class FuzzyIO","text":"<p>ClassList &gt; FuzzyIO</p> <p>Class to manage fuzzy inputs and outputs. Base class for FuzzyInput andFuzzyOutput .</p> <ul> <li><code>#include &lt;FuzzyIO.h&gt;</code></li> </ul> <p>Inherited by the following classes: FuzzyInput,  FuzzyOutput</p>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/#public-functions","title":"Public Functions","text":"Type Name FuzzyIO () Default constructor. FuzzyIO (int index) Construct a new FuzzyIO object with a provided index. bool addFuzzySet (FuzzySet * fuzzySet) Add a new FuzzySet to theFuzzyIO object. float getCrispInput () Get the value of the crisp input for this FuzzyIO object. int getIndex () Get the current index of the FuzzyIO object. void resetFuzzySets () Resets all fuzzy sets. void setCrispInput (float crispInput) Set the value of the crisp input for this FuzzyIO object. ~FuzzyIO () Default destructor."},{"location":"eFLL-Reborn/class_fuzzy_i_o/#protected-attributes","title":"Protected Attributes","text":"Type Name float crispInput The crisp input value for the FuzzyIO object. fuzzySetArray * fuzzySets Linked list of FuzzySet objects. int index The index of the FuzzyIO object."},{"location":"eFLL-Reborn/class_fuzzy_i_o/#protected-functions","title":"Protected Functions","text":"Type Name void cleanFuzzySets (fuzzySetArray * aux) Recursively clean all FuzzySet structs from memory."},{"location":"eFLL-Reborn/class_fuzzy_i_o/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"eFLL-Reborn/class_fuzzy_i_o/#function-fuzzyio-12","title":"function FuzzyIO [1/2]","text":"<p>Default constructor. C++<pre><code>FuzzyIO::FuzzyIO () \n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/#function-fuzzyio-22","title":"function FuzzyIO [2/2]","text":"<p>Construct a new FuzzyIO object with a provided index. C++<pre><code>FuzzyIO::FuzzyIO (\n    int index\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>index</code> The index of the FuzzyIO object. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/#function-addfuzzyset","title":"function addFuzzySet","text":"<p>Add a new FuzzySet to theFuzzyIO object. C++<pre><code>bool FuzzyIO::addFuzzySet (\n    FuzzySet * fuzzySet\n) \n</code></pre></p> <p>Note:</p> <p>will malloc a new fuzzySetArray struct and add it to the linked list of fuzzySets. Uses the provided pointer to the FuzzySet object as the fuzzySet member of the new fuzzySetArray struct.</p> <p>Parameters:</p> <ul> <li><code>fuzzySet</code> Pointer to the FuzzySet object to add to the FuzzyIO object. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzySet was added successfully. </li> <li><code>false</code> if the FuzzySet could not be added or memory could not be allocated to add the new set. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/#function-getcrispinput","title":"function getCrispInput","text":"<p>Get the value of the crisp input for this FuzzyIO object. C++<pre><code>float FuzzyIO::getCrispInput () \n</code></pre></p> <p>Returns:</p> <p>float the crisp input value. </p>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/#function-getindex","title":"function getIndex","text":"<p>Get the current index of the FuzzyIO object. C++<pre><code>int FuzzyIO::getIndex () \n</code></pre></p> <p>Returns:</p> <p>int the index of the FuzzyIO object. </p>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/#function-resetfuzzysets","title":"function resetFuzzySets","text":"<p>Resets all fuzzy sets. C++<pre><code>void FuzzyIO::resetFuzzySets () \n</code></pre></p> <p>Returns:</p> <p>true always returns true. </p>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/#function-setcrispinput","title":"function setCrispInput","text":"<p>Set the value of the crisp input for this FuzzyIO object. C++<pre><code>void FuzzyIO::setCrispInput (\n    float crispInput\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>crispInput</code> The crisp input value to set. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/#function-fuzzyio","title":"function ~FuzzyIO","text":"<p>Default destructor. C++<pre><code>FuzzyIO::~FuzzyIO () \n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"eFLL-Reborn/class_fuzzy_i_o/#variable-crispinput","title":"variable crispInput","text":"<p>The crisp input value for the FuzzyIO object. C++<pre><code>float FuzzyIO::crispInput;\n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/#variable-fuzzysets","title":"variable fuzzySets","text":"<p>Linked list of FuzzySet objects. C++<pre><code>fuzzySetArray* FuzzyIO::fuzzySets;\n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/#variable-index","title":"variable index","text":"<p>The index of the FuzzyIO object. C++<pre><code>int FuzzyIO::index;\n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_i_o/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"eFLL-Reborn/class_fuzzy_i_o/#function-cleanfuzzysets","title":"function cleanFuzzySets","text":"<p>Recursively clean all FuzzySet structs from memory. C++<pre><code>void FuzzyIO::cleanFuzzySets (\n    fuzzySetArray * aux\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>aux</code> Pointer to the first FuzzySet struct in the linked list to clean up. </li> </ul> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyIO.h</code></p>"},{"location":"eFLL-Reborn/class_fuzzy_input/","title":"Class FuzzyInput","text":"<p>ClassList &gt; FuzzyInput</p> <p>Class to manage fuzzy inputs. </p> <ul> <li><code>#include &lt;FuzzyInput.h&gt;</code></li> </ul> <p>Inherits the following classes: FuzzyIO</p>"},{"location":"eFLL-Reborn/class_fuzzy_input/#public-functions","title":"Public Functions","text":"Type Name FuzzyInput () Default constructor. FuzzyInput (int index) Construct a new Fuzzy Input object with a provided index. bool calculateFuzzySetPertinences () Calculate the pertinence of all FuzzySet objects in theFuzzyInput . ~FuzzyInput () Default destructor."},{"location":"eFLL-Reborn/class_fuzzy_input/#public-functions-inherited-from-fuzzyio","title":"Public Functions inherited from FuzzyIO","text":"<p>See FuzzyIO</p> Type Name FuzzyIO () Default constructor. FuzzyIO (int index) Construct a new FuzzyIO object with a provided index. bool addFuzzySet (FuzzySet * fuzzySet) Add a new FuzzySet to theFuzzyIO object. float getCrispInput () Get the value of the crisp input for this FuzzyIO object. int getIndex () Get the current index of the FuzzyIO object. void resetFuzzySets () Resets all fuzzy sets. void setCrispInput (float crispInput) Set the value of the crisp input for this FuzzyIO object. ~FuzzyIO () Default destructor."},{"location":"eFLL-Reborn/class_fuzzy_input/#protected-attributes-inherited-from-fuzzyio","title":"Protected Attributes inherited from FuzzyIO","text":"<p>See FuzzyIO</p> Type Name float crispInput The crisp input value for the FuzzyIO object. fuzzySetArray * fuzzySets Linked list of FuzzySet objects. int index The index of the FuzzyIO object."},{"location":"eFLL-Reborn/class_fuzzy_input/#protected-functions-inherited-from-fuzzyio","title":"Protected Functions inherited from FuzzyIO","text":"<p>See FuzzyIO</p> Type Name void cleanFuzzySets (fuzzySetArray * aux) Recursively clean all FuzzySet structs from memory."},{"location":"eFLL-Reborn/class_fuzzy_input/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"eFLL-Reborn/class_fuzzy_input/#function-fuzzyinput-12","title":"function FuzzyInput [1/2]","text":"<p>Default constructor. C++<pre><code>FuzzyInput::FuzzyInput () \n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_input/#function-fuzzyinput-22","title":"function FuzzyInput [2/2]","text":"<p>Construct a new Fuzzy Input object with a provided index. C++<pre><code>FuzzyInput::FuzzyInput (\n    int index\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>index</code> The index of the FuzzyInput object. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_input/#function-calculatefuzzysetpertinences","title":"function calculateFuzzySetPertinences","text":"<p>Calculate the pertinence of all FuzzySet objects in theFuzzyInput . C++<pre><code>bool FuzzyInput::calculateFuzzySetPertinences () \n</code></pre></p> <p>Returns:</p> <p>true always returns true. </p>"},{"location":"eFLL-Reborn/class_fuzzy_input/#function-fuzzyinput","title":"function ~FuzzyInput","text":"<p>Default destructor. C++<pre><code>FuzzyInput::~FuzzyInput () \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyInput.h</code></p>"},{"location":"eFLL-Reborn/class_fuzzy_output/","title":"Class FuzzyOutput","text":"<p>ClassList &gt; FuzzyOutput</p> <p>Class to manage fuzzy outputs. </p> <ul> <li><code>#include &lt;FuzzyOutput.h&gt;</code></li> </ul> <p>Inherits the following classes: FuzzyIO</p>"},{"location":"eFLL-Reborn/class_fuzzy_output/#public-functions","title":"Public Functions","text":"Type Name FuzzyOutput () Default constructor. FuzzyOutput (int index) Construct a new Fuzzy Output object with a provided index. float getCrispOutput () Get the Crisp Output after a truncation process. FuzzyComposition * getFuzzyComposition () Get the Fuzzy Composition of all the fuzzy sets in theFuzzyOutput . bool order () Sort the fuzzy sets in the FuzzyOutput by the reference of the point A in ascending order. bool truncate () Build and calculate the centroid of the fuzzy sets, leading to the crisp output. ~FuzzyOutput () Default destructor."},{"location":"eFLL-Reborn/class_fuzzy_output/#public-functions-inherited-from-fuzzyio","title":"Public Functions inherited from FuzzyIO","text":"<p>See FuzzyIO</p> Type Name FuzzyIO () Default constructor. FuzzyIO (int index) Construct a new FuzzyIO object with a provided index. bool addFuzzySet (FuzzySet * fuzzySet) Add a new FuzzySet to theFuzzyIO object. float getCrispInput () Get the value of the crisp input for this FuzzyIO object. int getIndex () Get the current index of the FuzzyIO object. void resetFuzzySets () Resets all fuzzy sets. void setCrispInput (float crispInput) Set the value of the crisp input for this FuzzyIO object. ~FuzzyIO () Default destructor."},{"location":"eFLL-Reborn/class_fuzzy_output/#protected-attributes-inherited-from-fuzzyio","title":"Protected Attributes inherited from FuzzyIO","text":"<p>See FuzzyIO</p> Type Name float crispInput The crisp input value for the FuzzyIO object. fuzzySetArray * fuzzySets Linked list of FuzzySet objects. int index The index of the FuzzyIO object."},{"location":"eFLL-Reborn/class_fuzzy_output/#protected-functions-inherited-from-fuzzyio","title":"Protected Functions inherited from FuzzyIO","text":"<p>See FuzzyIO</p> Type Name void cleanFuzzySets (fuzzySetArray * aux) Recursively clean all FuzzySet structs from memory."},{"location":"eFLL-Reborn/class_fuzzy_output/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"eFLL-Reborn/class_fuzzy_output/#function-fuzzyoutput-12","title":"function FuzzyOutput [1/2]","text":"<p>Default constructor. C++<pre><code>FuzzyOutput::FuzzyOutput () \n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_output/#function-fuzzyoutput-22","title":"function FuzzyOutput [2/2]","text":"<p>Construct a new Fuzzy Output object with a provided index. C++<pre><code>FuzzyOutput::FuzzyOutput (\n    int index\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>index</code> The index of the FuzzyOutput object. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_output/#function-getcrispoutput","title":"function getCrispOutput","text":"<p>Get the Crisp Output after a truncation process. C++<pre><code>float FuzzyOutput::getCrispOutput () \n</code></pre></p> <p>Returns:</p> <p>float the crisp output of the FuzzyOutput. </p>"},{"location":"eFLL-Reborn/class_fuzzy_output/#function-getfuzzycomposition","title":"function getFuzzyComposition","text":"<p>Get the Fuzzy Composition of all the fuzzy sets in theFuzzyOutput . C++<pre><code>FuzzyComposition * FuzzyOutput::getFuzzyComposition () \n</code></pre></p> <p>Returns:</p> <p>FuzzyComposition* a pointer to the FuzzyComposition object of the FuzzyOutput. </p>"},{"location":"eFLL-Reborn/class_fuzzy_output/#function-order","title":"function order","text":"<p>Sort the fuzzy sets in the FuzzyOutput by the reference of the point A in ascending order. C++<pre><code>bool FuzzyOutput::order () \n</code></pre></p> <p>It is just a simple Bubble Sort.</p> <p>Returns:</p> <p>true always returns true. </p>"},{"location":"eFLL-Reborn/class_fuzzy_output/#function-truncate","title":"function truncate","text":"<p>Build and calculate the centroid of the fuzzy sets, leading to the crisp output. C++<pre><code>bool FuzzyOutput::truncate () \n</code></pre></p> <p>Returns:</p> <p>true always returns true. </p>"},{"location":"eFLL-Reborn/class_fuzzy_output/#function-fuzzyoutput","title":"function ~FuzzyOutput","text":"<p>Default destructor. C++<pre><code>FuzzyOutput::~FuzzyOutput () \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyOutput.h</code></p>"},{"location":"eFLL-Reborn/class_fuzzy_rule/","title":"Class FuzzyRule","text":"<p>ClassList &gt; FuzzyRule</p> <p>Class to manage fuzzy rules. </p> <ul> <li><code>#include &lt;FuzzyRule.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_rule/#public-functions","title":"Public Functions","text":"Type Name FuzzyRule () Default constructor. FuzzyRule (int index, FuzzyRuleAntecedent * fuzzyRuleAntecedent, FuzzyRuleConsequent * fuzzyRuleConsequent) Construct a new Fuzzy Rule object with a provided index, antecedent and consequent. bool evaluateExpression () Evaluates the rule expression given the antecedent and consequent. int getIndex () Get the Index of the FuzzyRule . bool isFired () Check to see if the rule was fired."},{"location":"eFLL-Reborn/class_fuzzy_rule/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"eFLL-Reborn/class_fuzzy_rule/#function-fuzzyrule-12","title":"function FuzzyRule [1/2]","text":"<p>Default constructor. C++<pre><code>FuzzyRule::FuzzyRule () \n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_rule/#function-fuzzyrule-22","title":"function FuzzyRule [2/2]","text":"<p>Construct a new Fuzzy Rule object with a provided index, antecedent and consequent. C++<pre><code>FuzzyRule::FuzzyRule (\n    int index,\n    FuzzyRuleAntecedent * fuzzyRuleAntecedent,\n    FuzzyRuleConsequent * fuzzyRuleConsequent\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>index</code> The index of the FuzzyRule object. </li> <li><code>fuzzyRuleAntecedent</code> The antecedent of the FuzzyRule. </li> <li><code>fuzzyRuleConsequent</code> The consequent of the FuzzyRule. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_rule/#function-evaluateexpression","title":"function evaluateExpression","text":"<p>Evaluates the rule expression given the antecedent and consequent. C++<pre><code>bool FuzzyRule::evaluateExpression () \n</code></pre></p> <p>Return value:</p> <ul> <li><code>true</code> if the rule was fired. </li> <li><code>false</code> if the rule was not fired. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_rule/#function-getindex","title":"function getIndex","text":"<p>Get the Index of the FuzzyRule . C++<pre><code>int FuzzyRule::getIndex () \n</code></pre></p> <p>Returns:</p> <p>int the index of the FuzzyRule. </p>"},{"location":"eFLL-Reborn/class_fuzzy_rule/#function-isfired","title":"function isFired","text":"<p>Check to see if the rule was fired. C++<pre><code>bool FuzzyRule::isFired () \n</code></pre></p> <p>Return value:</p> <ul> <li><code>true</code> if the rule was fired. </li> <li><code>false</code> if the rule was not fired. </li> </ul> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyRule.h</code></p>"},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/","title":"Class FuzzyRuleAntecedent","text":"<p>ClassList &gt; FuzzyRuleAntecedent</p> <p>Class to manage the antecedent of a fuzzy rule. </p> <ul> <li><code>#include &lt;FuzzyRuleAntecedent.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#public-functions","title":"Public Functions","text":"Type Name FuzzyRuleAntecedent () Default constructor. float evaluate () Calculates the pertinence of the antecedent. bool joinSingle (FuzzySet * fuzzySet) Create an antecedent with only one set. bool joinWithAND (FuzzySet * fuzzySet1, FuzzySet * fuzzySet2) Create an antecedent with two sets joined by an AND operator. bool joinWithAND (FuzzySet * fuzzySet, FuzzyRuleAntecedent * fuzzyRuleAntecedent) Create an antecedent with one set and one antecedent joined by an AND operator. bool joinWithAND (FuzzyRuleAntecedent * fuzzyRuleAntecedent, FuzzySet * fuzzySet)  bool joinWithAND (FuzzyRuleAntecedent * fuzzyRuleAntecedent1, FuzzyRuleAntecedent * fuzzyRuleAntecedent2) Create an antecedent with two antecedents joined by an AND operator. bool joinWithOR (FuzzySet * fuzzySet1, FuzzySet * fuzzySet2) Create an antecedent with two sets joined by an OR operator. bool joinWithOR (FuzzySet * fuzzySet, FuzzyRuleAntecedent * fuzzyRuleAntecedent) Create an antecedent with one set and one antecedent joined by an OR operator. bool joinWithOR (FuzzyRuleAntecedent * fuzzyRuleAntecedent, FuzzySet * fuzzySet)  bool joinWithOR (FuzzyRuleAntecedent * fuzzyRuleAntecedent1, FuzzyRuleAntecedent * fuzzyRuleAntecedent2) Create an antecedent with two antecedents joined by an OR operator."},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#function-fuzzyruleantecedent","title":"function FuzzyRuleAntecedent","text":"<p>Default constructor. C++<pre><code>FuzzyRuleAntecedent::FuzzyRuleAntecedent () \n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#function-evaluate","title":"function evaluate","text":"<p>Calculates the pertinence of the antecedent. C++<pre><code>float FuzzyRuleAntecedent::evaluate () \n</code></pre></p> <p>Note:</p> <p>Relies on underlying FuzzySets to have their pertinence calculated first.</p> <p>Returns:</p> <p>float The pertinence of the antecedent. </p>"},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#function-joinsingle","title":"function joinSingle","text":"<p>Create an antecedent with only one set. C++<pre><code>bool FuzzyRuleAntecedent::joinSingle (\n    FuzzySet * fuzzySet\n) \n</code></pre></p> <p>Note:</p> <p>Example result would be \"IF (COLD)\"</p> <p>Parameters:</p> <ul> <li><code>fuzzySet</code> The fuzzy set to add. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzySet was added successfully. </li> <li><code>false</code> if the FuzzySet could not be added or was not valid. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#function-joinwithand-14","title":"function joinWithAND [1/4]","text":"<p>Create an antecedent with two sets joined by an AND operator. C++<pre><code>bool FuzzyRuleAntecedent::joinWithAND (\n    FuzzySet * fuzzySet1,\n    FuzzySet * fuzzySet2\n) \n</code></pre></p> <p>Note:</p> <p>Example result would be \"IF (COLD) AND (WINDY)\"</p> <p>Parameters:</p> <ul> <li><code>fuzzySet1</code> The first fuzzy set to add. </li> <li><code>fuzzySet2</code> The second fuzzy set to add. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzySets were added successfully. </li> <li><code>false</code> if the FuzzySets could not be added or either were not valid. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#function-joinwithand-24","title":"function joinWithAND [2/4]","text":"<p>Create an antecedent with one set and one antecedent joined by an AND operator. C++<pre><code>bool FuzzyRuleAntecedent::joinWithAND (\n    FuzzySet * fuzzySet,\n    FuzzyRuleAntecedent * fuzzyRuleAntecedent\n) \n</code></pre></p> <p>Note:</p> <p>Example result would be \"IF (COLD) AND (IF WINDY AND RAINY)\"</p> <p>Parameters:</p> <ul> <li><code>fuzzySet</code> The fuzzy set to add. </li> <li><code>fuzzyRuleAntecedent</code> The antecedent to add. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzySet and FuzzyRuleAntecedent were added successfully. </li> </ul> <p>Returns:</p> <p>false if the FuzzySet or FuzzyRuleAntecedent could not be added or were not valid. </p>"},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#function-joinwithand-34","title":"function joinWithAND [3/4]","text":"C++<pre><code>bool FuzzyRuleAntecedent::joinWithAND (\n    FuzzyRuleAntecedent * fuzzyRuleAntecedent,\n    FuzzySet * fuzzySet\n) \n</code></pre> <p>Same as above but inverted </p>"},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#function-joinwithand-44","title":"function joinWithAND [4/4]","text":"<p>Create an antecedent with two antecedents joined by an AND operator. C++<pre><code>bool FuzzyRuleAntecedent::joinWithAND (\n    FuzzyRuleAntecedent * fuzzyRuleAntecedent1,\n    FuzzyRuleAntecedent * fuzzyRuleAntecedent2\n) \n</code></pre></p> <p>Note:</p> <p>Example result would be \"IF (IF COLD AND WINDY) AND (IF WINDY AND RAINY)\"</p> <p>Parameters:</p> <ul> <li><code>fuzzyRuleAntecedent1</code> The first antecedent to add. </li> <li><code>fuzzyRuleAntecedent2</code> The second antecedent to add. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzyRuleAntecedents were added successfully. </li> </ul> <p>Returns:</p> <p>false if the FuzzyRuleAntecedents could not be added or were not valid. </p>"},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#function-joinwithor-14","title":"function joinWithOR [1/4]","text":"<p>Create an antecedent with two sets joined by an OR operator. C++<pre><code>bool FuzzyRuleAntecedent::joinWithOR (\n    FuzzySet * fuzzySet1,\n    FuzzySet * fuzzySet2\n) \n</code></pre></p> <p>Note:</p> <p>Example result would be \"IF (COLD) OR (WINDY)\"</p> <p>Parameters:</p> <ul> <li><code>fuzzySet1</code> The first fuzzy set to add. </li> <li><code>fuzzySet2</code> The second fuzzy set to add. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzySets were added successfully. </li> <li><code>false</code> if the FuzzySets could not be added or either were not valid. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#function-joinwithor-24","title":"function joinWithOR [2/4]","text":"<p>Create an antecedent with one set and one antecedent joined by an OR operator. C++<pre><code>bool FuzzyRuleAntecedent::joinWithOR (\n    FuzzySet * fuzzySet,\n    FuzzyRuleAntecedent * fuzzyRuleAntecedent\n) \n</code></pre></p> <p>Note:</p> <p>Example result would be \"IF (COLD) OR (IF WINDY AND RAINY)\"</p> <p>Parameters:</p> <ul> <li><code>fuzzySet</code> The fuzzy set to add. </li> <li><code>fuzzyRuleAntecedent</code> The antecedent to add. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzySet and FuzzyRuleAntecedent were added successfully. </li> </ul> <p>Returns:</p> <p>false if the FuzzySet or FuzzyRuleAntecedent could not be added or were not valid. </p>"},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#function-joinwithor-34","title":"function joinWithOR [3/4]","text":"C++<pre><code>bool FuzzyRuleAntecedent::joinWithOR (\n    FuzzyRuleAntecedent * fuzzyRuleAntecedent,\n    FuzzySet * fuzzySet\n) \n</code></pre> <p>Same as above but inverted </p>"},{"location":"eFLL-Reborn/class_fuzzy_rule_antecedent/#function-joinwithor-44","title":"function joinWithOR [4/4]","text":"<p>Create an antecedent with two antecedents joined by an OR operator. C++<pre><code>bool FuzzyRuleAntecedent::joinWithOR (\n    FuzzyRuleAntecedent * fuzzyRuleAntecedent1,\n    FuzzyRuleAntecedent * fuzzyRuleAntecedent2\n) \n</code></pre></p> <p>Note:</p> <p>Example result would be \"IF (IF COLD AND WINDY) OR (IF WINDY AND RAINY)\"</p> <p>Parameters:</p> <ul> <li><code>fuzzyRuleAntecedent1</code> The first antecedent to add. </li> <li><code>fuzzyRuleAntecedent2</code> The second antecedent to add. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzyRuleAntecedents were added successfully. </li> <li><code>false</code> if the FuzzyRuleAntecedents could not be added or were not valid. </li> </ul> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyRuleAntecedent.h</code></p>"},{"location":"eFLL-Reborn/class_fuzzy_rule_consequent/","title":"Class FuzzyRuleConsequent","text":"<p>ClassList &gt; FuzzyRuleConsequent</p> <p>Class to manage the consequent of a fuzzy rule. </p> <ul> <li><code>#include &lt;FuzzyRuleConsequent.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_rule_consequent/#public-functions","title":"Public Functions","text":"Type Name FuzzyRuleConsequent () Default constructor. bool addOutput (FuzzySet * fuzzySet) Add a new FuzzySet (for Output) intoFuzzyRuleConsequent . bool evaluate (float power) Set the pertinence of this consequent (how much the fired rule will affect the output) ~FuzzyRuleConsequent () Default destructor."},{"location":"eFLL-Reborn/class_fuzzy_rule_consequent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"eFLL-Reborn/class_fuzzy_rule_consequent/#function-fuzzyruleconsequent","title":"function FuzzyRuleConsequent","text":"<p>Default constructor. C++<pre><code>FuzzyRuleConsequent::FuzzyRuleConsequent () \n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_rule_consequent/#function-addoutput","title":"function addOutput","text":"<p>Add a new FuzzySet (for Output) intoFuzzyRuleConsequent . C++<pre><code>bool FuzzyRuleConsequent::addOutput (\n    FuzzySet * fuzzySet\n) \n</code></pre></p> <p>Note:</p> <p>Will malloc a new fuzzySetOutputArray struct and add it to the linked list of FuzzySets. Uses the provided FuzzySet to populate the new fuzzySetOutputArray struct.</p> <p>Parameters:</p> <ul> <li><code>fuzzySet</code> The FuzzySet to add to the FuzzyRuleConsequent. </li> </ul> <p>Return value:</p> <ul> <li><code>true</code> if the FuzzySet was added successfully. </li> <li><code>false</code> if the FuzzySet could not be added or memory could not be allocated to add the new FuzzySet. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_rule_consequent/#function-evaluate","title":"function evaluate","text":"<p>Set the pertinence of this consequent (how much the fired rule will affect the output) C++<pre><code>bool FuzzyRuleConsequent::evaluate (\n    float power\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>power</code> The pertinence of this consequent. </li> </ul> <p>Returns:</p> <p>true always returns true. </p>"},{"location":"eFLL-Reborn/class_fuzzy_rule_consequent/#function-fuzzyruleconsequent_1","title":"function ~FuzzyRuleConsequent","text":"<p>Default destructor. C++<pre><code>FuzzyRuleConsequent::~FuzzyRuleConsequent () \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyRuleConsequent.h</code></p>"},{"location":"eFLL-Reborn/class_fuzzy_set/","title":"Class FuzzySet","text":"<p>ClassList &gt; FuzzySet</p> <p>A class to manage a fuzzy set (shape) </p> <ul> <li><code>#include &lt;FuzzySet.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_set/#public-functions","title":"Public Functions","text":"Type Name FuzzySet () Default constructor. FuzzySet (float a, float b, float c, float d) Construct a new Fuzzy Set object with provided points for a shape. bool calculatePertinence (float crispValue) Calculate the pertinence of the set, according with the crispValue. float getPertinence () Get the pertinence of the set. float getPointA () Get the location of point A (the first point of the shape). float getPointB () Get the location of point B (the second point of the shape). float getPointC () Get the location of point C (the third point of the shape). float getPointD () Get the location of point D (the fourth point of the shape). void reset () Resets the pertinence of the set to 0.0. void setPertinence (float pertinence) Set the pertinence of the set."},{"location":"eFLL-Reborn/class_fuzzy_set/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"eFLL-Reborn/class_fuzzy_set/#function-fuzzyset-12","title":"function FuzzySet [1/2]","text":"<p>Default constructor. C++<pre><code>FuzzySet::FuzzySet () \n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_set/#function-fuzzyset-22","title":"function FuzzySet [2/2]","text":"<p>Construct a new Fuzzy Set object with provided points for a shape. C++<pre><code>FuzzySet::FuzzySet (\n    float a,\n    float b,\n    float c,\n    float d\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>a</code> the first point of the shape. </li> <li><code>b</code> the second point of the shape. </li> <li><code>c</code> the third point of the shape. </li> <li><code>d</code> the fourth point of the shape. </li> </ul>"},{"location":"eFLL-Reborn/class_fuzzy_set/#function-calculatepertinence","title":"function calculatePertinence","text":"<p>Calculate the pertinence of the set, according with the crispValue. C++<pre><code>bool FuzzySet::calculatePertinence (\n    float crispValue\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>crispValue</code> The input value to calculate the pertinence of the set on. </li> </ul> <p>Returns:</p> <p>true always returns true. </p>"},{"location":"eFLL-Reborn/class_fuzzy_set/#function-getpertinence","title":"function getPertinence","text":"<p>Get the pertinence of the set. C++<pre><code>float FuzzySet::getPertinence () \n</code></pre></p> <p>Returns:</p> <p>float The pertinence of the set. </p>"},{"location":"eFLL-Reborn/class_fuzzy_set/#function-getpointa","title":"function getPointA","text":"<p>Get the location of point A (the first point of the shape). C++<pre><code>float FuzzySet::getPointA () \n</code></pre></p> <p>Returns:</p> <p>float the location of point A. </p>"},{"location":"eFLL-Reborn/class_fuzzy_set/#function-getpointb","title":"function getPointB","text":"<p>Get the location of point B (the second point of the shape). C++<pre><code>float FuzzySet::getPointB () \n</code></pre></p> <p>Returns:</p> <p>float the location of point B. </p>"},{"location":"eFLL-Reborn/class_fuzzy_set/#function-getpointc","title":"function getPointC","text":"<p>Get the location of point C (the third point of the shape). C++<pre><code>float FuzzySet::getPointC () \n</code></pre></p> <p>Returns:</p> <p>float the location of point C. </p>"},{"location":"eFLL-Reborn/class_fuzzy_set/#function-getpointd","title":"function getPointD","text":"<p>Get the location of point D (the fourth point of the shape). C++<pre><code>float FuzzySet::getPointD () \n</code></pre></p> <p>Returns:</p> <p>float the location of point D. </p>"},{"location":"eFLL-Reborn/class_fuzzy_set/#function-reset","title":"function reset","text":"<p>Resets the pertinence of the set to 0.0. C++<pre><code>void FuzzySet::reset () \n</code></pre></p>"},{"location":"eFLL-Reborn/class_fuzzy_set/#function-setpertinence","title":"function setPertinence","text":"<p>Set the pertinence of the set. C++<pre><code>void FuzzySet::setPertinence (\n    float pertinence\n) \n</code></pre></p> <p>Note:</p> <p>Will only set the pertinence if the provided pertinence is greater than the current pertinence.</p> <p>The overriding to a higher pertinence is because this could be called more than once by different consequents, and the higher pertinence is the one that should be kept.</p> <p>Parameters:</p> <ul> <li><code>pertinence</code> The new pertinence of the set. </li> </ul> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzySet.h</code></p>"},{"location":"eFLL-Reborn/structfuzzy_input_array/","title":"Struct fuzzyInputArray","text":"<p>ClassList &gt; fuzzyInputArray</p> <p>Linked list struct for FuzzyInput objects.</p> <ul> <li><code>#include &lt;Fuzzy.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/structfuzzy_input_array/#public-attributes","title":"Public Attributes","text":"Type Name FuzzyInput * fuzzyInput Pointer to the current FuzzyInput . fuzzyInputArray * next Pointer to the next FuzzyInput in the list."},{"location":"eFLL-Reborn/structfuzzy_input_array/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"eFLL-Reborn/structfuzzy_input_array/#variable-fuzzyinput","title":"variable fuzzyInput","text":"<p>Pointer to the current FuzzyInput . C++<pre><code>FuzzyInput* fuzzyInputArray::fuzzyInput;\n</code></pre></p>"},{"location":"eFLL-Reborn/structfuzzy_input_array/#variable-next","title":"variable next","text":"<p>Pointer to the next FuzzyInput in the list. C++<pre><code>fuzzyInputArray* fuzzyInputArray::next;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>include/eFLL/Fuzzy.h</code></p>"},{"location":"eFLL-Reborn/structfuzzy_output_array/","title":"Struct fuzzyOutputArray","text":"<p>ClassList &gt; fuzzyOutputArray</p> <p>Linked list struct for FuzzyOutput objects.</p> <ul> <li><code>#include &lt;Fuzzy.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/structfuzzy_output_array/#public-attributes","title":"Public Attributes","text":"Type Name FuzzyOutput * fuzzyOutput Pointer to the current FuzzyOutput . fuzzyOutputArray * next Pointer to the next FuzzyOutput in the list."},{"location":"eFLL-Reborn/structfuzzy_output_array/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"eFLL-Reborn/structfuzzy_output_array/#variable-fuzzyoutput","title":"variable fuzzyOutput","text":"<p>Pointer to the current FuzzyOutput . C++<pre><code>FuzzyOutput* fuzzyOutputArray::fuzzyOutput;\n</code></pre></p>"},{"location":"eFLL-Reborn/structfuzzy_output_array/#variable-next","title":"variable next","text":"<p>Pointer to the next FuzzyOutput in the list. C++<pre><code>fuzzyOutputArray* fuzzyOutputArray::next;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>include/eFLL/Fuzzy.h</code></p>"},{"location":"eFLL-Reborn/structfuzzy_rule_array/","title":"Struct fuzzyRuleArray","text":"<p>ClassList &gt; fuzzyRuleArray</p> <p>Linked list struct for FuzzyRule objects.</p> <ul> <li><code>#include &lt;Fuzzy.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/structfuzzy_rule_array/#public-attributes","title":"Public Attributes","text":"Type Name FuzzyRule * fuzzyRule Pointer to the current FuzzyRule . fuzzyRuleArray * next Pointer to the next FuzzyRule in the list."},{"location":"eFLL-Reborn/structfuzzy_rule_array/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"eFLL-Reborn/structfuzzy_rule_array/#variable-fuzzyrule","title":"variable fuzzyRule","text":"<p>Pointer to the current FuzzyRule . C++<pre><code>FuzzyRule* fuzzyRuleArray::fuzzyRule;\n</code></pre></p>"},{"location":"eFLL-Reborn/structfuzzy_rule_array/#variable-next","title":"variable next","text":"<p>Pointer to the next FuzzyRule in the list. C++<pre><code>fuzzyRuleArray* fuzzyRuleArray::next;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>include/eFLL/Fuzzy.h</code></p>"},{"location":"eFLL-Reborn/structfuzzy_set_array/","title":"Struct fuzzySetArray","text":"<p>ClassList &gt; fuzzySetArray</p> <p>Linked list struct for FuzzySet objects.</p> <ul> <li><code>#include &lt;FuzzyIO.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/structfuzzy_set_array/#public-attributes","title":"Public Attributes","text":"Type Name FuzzySet * fuzzySet Pointer to the current FuzzySet . fuzzySetArray * next Pointer to the next FuzzySet in the list."},{"location":"eFLL-Reborn/structfuzzy_set_array/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"eFLL-Reborn/structfuzzy_set_array/#variable-fuzzyset","title":"variable fuzzySet","text":"<p>Pointer to the current FuzzySet . C++<pre><code>FuzzySet* fuzzySetArray::fuzzySet;\n</code></pre></p>"},{"location":"eFLL-Reborn/structfuzzy_set_array/#variable-next","title":"variable next","text":"<p>Pointer to the next FuzzySet in the list. C++<pre><code>fuzzySetArray* fuzzySetArray::next;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyIO.h</code></p>"},{"location":"eFLL-Reborn/structfuzzy_set_output_array/","title":"Struct fuzzySetOutputArray","text":"<p>ClassList &gt; fuzzySetOutputArray</p> <p>Linked list struct for FuzzySet objects.</p> <ul> <li><code>#include &lt;FuzzyRuleConsequent.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/structfuzzy_set_output_array/#public-attributes","title":"Public Attributes","text":"Type Name FuzzySet * fuzzySet Pointer to the current FuzzySet . fuzzySetOutputArray * next Pointer to the next FuzzySet in the list."},{"location":"eFLL-Reborn/structfuzzy_set_output_array/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"eFLL-Reborn/structfuzzy_set_output_array/#variable-fuzzyset","title":"variable fuzzySet","text":"<p>Pointer to the current FuzzySet . C++<pre><code>FuzzySet* fuzzySetOutputArray::fuzzySet;\n</code></pre></p>"},{"location":"eFLL-Reborn/structfuzzy_set_output_array/#variable-next","title":"variable next","text":"<p>Pointer to the next FuzzySet in the list. C++<pre><code>fuzzySetOutputArray* fuzzySetOutputArray::next;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyRuleConsequent.h</code></p>"},{"location":"eFLL-Reborn/structpoints_array/","title":"Struct pointsArray","text":"<p>ClassList &gt; pointsArray</p> <p>Linked list struct for a point and its pertinence. </p> <ul> <li><code>#include &lt;FuzzyComposition.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/structpoints_array/#public-attributes","title":"Public Attributes","text":"Type Name pointsArray * next float pertinence float point pointsArray * previous"},{"location":"eFLL-Reborn/structpoints_array/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"eFLL-Reborn/structpoints_array/#variable-next","title":"variable next","text":"C++<pre><code>pointsArray* pointsArray::next;\n</code></pre>"},{"location":"eFLL-Reborn/structpoints_array/#variable-pertinence","title":"variable pertinence","text":"C++<pre><code>float pointsArray::pertinence;\n</code></pre>"},{"location":"eFLL-Reborn/structpoints_array/#variable-point","title":"variable point","text":"C++<pre><code>float pointsArray::point;\n</code></pre>"},{"location":"eFLL-Reborn/structpoints_array/#variable-previous","title":"variable previous","text":"C++<pre><code>pointsArray* pointsArray::previous;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyComposition.h</code></p>"},{"location":"eFLL-Reborn/dir_d44c64559bbebec7f509842c48db8b23/","title":"Dir include","text":"<p>FileList &gt; include</p>"},{"location":"eFLL-Reborn/dir_d44c64559bbebec7f509842c48db8b23/#directories","title":"Directories","text":"Type Name dir eFLL <p>The documentation for this class was generated from the following file <code>include/</code></p>"},{"location":"eFLL-Reborn/dir_26fb29e3dc7aa006416ef68260f1131f/","title":"Dir include/eFLL","text":"<p>FileList &gt; eFLL</p>"},{"location":"eFLL-Reborn/dir_26fb29e3dc7aa006416ef68260f1131f/#files","title":"Files","text":"Type Name file Fuzzy.h file FuzzyComposition.h file FuzzyIO.h file FuzzyInput.h file FuzzyOutput.h file FuzzyRule.h file FuzzyRuleAntecedent.h file FuzzyRuleConsequent.h file FuzzySet.h <p>The documentation for this class was generated from the following file <code>include/eFLL/</code></p>"},{"location":"eFLL-Reborn/_fuzzy_8h/","title":"File Fuzzy.h","text":"<p>FileList &gt; eFLL &gt; Fuzzy.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;inttypes.h&gt;</code></li> <li><code>#include \"FuzzyInput.h\"</code></li> <li><code>#include \"FuzzyOutput.h\"</code></li> <li><code>#include \"FuzzyRule.h\"</code></li> </ul>"},{"location":"eFLL-Reborn/_fuzzy_8h/#classes","title":"Classes","text":"Type Name class Fuzzy The main class of the eFLL library. This class is responsible for managing the fuzzy logic system. From adding inputs and outputs to the system, to defining rules and calculating the output. struct fuzzyInputArray Linked list struct for FuzzyInput objects. struct fuzzyOutputArray Linked list struct for FuzzyOutput objects. struct fuzzyRuleArray Linked list struct for FuzzyRule objects. <p>The documentation for this class was generated from the following file <code>include/eFLL/Fuzzy.h</code></p>"},{"location":"eFLL-Reborn/_fuzzy_8h_source/","title":"File Fuzzy.h","text":"<p>File List &gt; eFLL &gt; Fuzzy.h</p> <p>Go to the documentation of this file</p> C++<pre><code>/*\n * Robotic Research Group (RRG)\n * State University of Piau\u00ed (UESPI), Brazil - Piau\u00ed - Teresina\n *\n * Fuzzy.h\n *\n *      Author: AJ Alves &lt;aj.alves@zerokol.com&gt;\n *          Co authors: Dr. Ricardo Lira &lt;ricardor_usp@yahoo.com.br&gt;\n *                      Msc. Marvin Lemos &lt;marvinlemos@gmail.com&gt;\n *                      Douglas S. Kridi &lt;douglaskridi@gmail.com&gt;\n *                      Kannya Leal &lt;kannyal@hotmail.com&gt;\n */\n#ifndef FUZZY_H\n#define FUZZY_H\n\n// IMPORTING NECESSARY LIBRARIES\n#include &lt;inttypes.h&gt;\n\n#include \"FuzzyInput.h\"\n#include \"FuzzyOutput.h\"\n#include \"FuzzyRule.h\"\n\n\nstruct fuzzyInputArray\n{\n    FuzzyInput* fuzzyInput;\n    fuzzyInputArray* next;\n};\n\n\nstruct fuzzyOutputArray\n{\n    FuzzyOutput* fuzzyOutput;\n    fuzzyOutputArray* next;\n};\n\nstruct fuzzyRuleArray\n{\n    FuzzyRule* fuzzyRule;\n    fuzzyRuleArray* next;\n};\n\n// Main class of this library\nclass Fuzzy\n{\n  public:\n    Fuzzy();\n\n    ~Fuzzy();\n\n    bool addFuzzyInput(FuzzyInput* fuzzyInput);\n\n    bool addFuzzyOutput(FuzzyOutput* fuzzyOutput);\n\n    bool addFuzzyRule(FuzzyRule* fuzzyRule);\n\n    bool setInput(int fuzzyInputIndex, float crispValue);\n\n    bool fuzzify();\n\n    bool isFiredRule(int fuzzyRuleIndex);\n\n    float defuzzify(int fuzzyOutputIndex);\n\n  private:\n    fuzzyInputArray* fuzzyInputs;\n    fuzzyOutputArray* fuzzyOutputs;\n    fuzzyRuleArray* fuzzyRules;\n\n    void cleanFuzzyInputs(fuzzyInputArray* aux);\n\n    void cleanFuzzyOutputs(fuzzyOutputArray* aux);\n\n    void cleanFuzzyRules(fuzzyRuleArray* aux);\n};\n#endif\n</code></pre>"},{"location":"eFLL-Reborn/_fuzzy_composition_8h/","title":"File FuzzyComposition.h","text":"<p>FileList &gt; eFLL &gt; FuzzyComposition.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;stdlib.h&gt;</code></li> </ul>"},{"location":"eFLL-Reborn/_fuzzy_composition_8h/#classes","title":"Classes","text":"Type Name class FuzzyComposition A class to manage the composition of points and pertinences for a FuzzyOutput . struct pointsArray Linked list struct for a point and its pertinence."},{"location":"eFLL-Reborn/_fuzzy_composition_8h/#macros","title":"Macros","text":"Type Name define EPSILON_VALUE <code>1.0E-3</code>"},{"location":"eFLL-Reborn/_fuzzy_composition_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"eFLL-Reborn/_fuzzy_composition_8h/#define-epsilon_value","title":"define EPSILON_VALUE","text":"C++<pre><code>#define EPSILON_VALUE `1.0E-3`\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyComposition.h</code></p>"},{"location":"eFLL-Reborn/_fuzzy_composition_8h_source/","title":"File FuzzyComposition.h","text":"<p>File List &gt; eFLL &gt; FuzzyComposition.h</p> <p>Go to the documentation of this file</p> C++<pre><code>/*\n * Robotic Research Group (RRG)\n * State University of Piau\u00ed (UESPI), Brazil - Piau\u00ed - Teresina\n *\n * FuzzyComposition.h\n *\n *      Author: AJ Alves &lt;aj.alves@zerokol.com&gt;\n *          Co authors: Dr. Ricardo Lira &lt;ricardor_usp@yahoo.com.br&gt;\n *                      Msc. Marvin Lemos &lt;marvinlemos@gmail.com&gt;\n *                      Douglas S. Kridi &lt;douglaskridi@gmail.com&gt;\n *                      Kannya Leal &lt;kannyal@hotmail.com&gt;\n */\n#ifndef FUZZYCOMPOSITION_H\n#define FUZZYCOMPOSITION_H\n\n// IMPORTING NECESSARY LIBRARIES\n#include &lt;stdlib.h&gt;\n\n// CONSTANTS\n#define EPSILON_VALUE 1.0E-3\n\nstruct pointsArray\n{\n    pointsArray* previous;\n    float point;\n    float pertinence;\n    pointsArray* next;\n};\n\n\nclass FuzzyComposition\n{\n  public:\n    FuzzyComposition();\n\n    ~FuzzyComposition();\n\n    bool addPoint(float point, float pertinence);\n\n    bool checkPoint(float point, float pertinence);\n\n    bool build();\n\n    float calculate();\n\n    bool empty();\n\n    int countPoints();\n\n  private:\n    pointsArray* points;\n\n\n    void cleanPoints(pointsArray* aux);\n\n    bool rebuild(pointsArray* aSegmentBegin,\n                 pointsArray* aSegmentEnd,\n                 pointsArray* bSegmentBegin,\n                 pointsArray* bSegmentEnd);\n\n    bool rmvPoint(pointsArray* point);\n};\n#endif\n</code></pre>"},{"location":"eFLL-Reborn/_fuzzy_i_o_8h/","title":"File FuzzyIO.h","text":"<p>FileList &gt; eFLL &gt; FuzzyIO.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;stdlib.h&gt;</code></li> <li><code>#include \"FuzzySet.h\"</code></li> </ul>"},{"location":"eFLL-Reborn/_fuzzy_i_o_8h/#classes","title":"Classes","text":"Type Name class FuzzyIO Class to manage fuzzy inputs and outputs. Base class for FuzzyInput andFuzzyOutput . struct fuzzySetArray Linked list struct for FuzzySet objects. <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyIO.h</code></p>"},{"location":"eFLL-Reborn/_fuzzy_i_o_8h_source/","title":"File FuzzyIO.h","text":"<p>File List &gt; eFLL &gt; FuzzyIO.h</p> <p>Go to the documentation of this file</p> C++<pre><code>/*\n * Robotic Research Group (RRG)\n * State University of Piau\u00ed (UESPI), Brazil - Piau\u00ed - Teresina\n *\n * FuzzyIO.h\n *\n *      Author: AJ Alves &lt;aj.alves@zerokol.com&gt;\n *          Co authors: Dr. Ricardo Lira &lt;ricardor_usp@yahoo.com.br&gt;\n *                      Msc. Marvin Lemos &lt;marvinlemos@gmail.com&gt;\n *                      Douglas S. Kridi &lt;douglaskridi@gmail.com&gt;\n *                      Kannya Leal &lt;kannyal@hotmail.com&gt;\n */\n#ifndef FUZZYIO_H\n#define FUZZYIO_H\n\n// IMPORTING NECESSARY LIBRARIES\n#include &lt;stdlib.h&gt;\n\n#include \"FuzzySet.h\"\n\nstruct fuzzySetArray\n{\n    FuzzySet* fuzzySet;\n    fuzzySetArray* next;\n};\n\nclass FuzzyIO\n{\n  public:\n    FuzzyIO();\n\n    FuzzyIO(int index);\n\n    ~FuzzyIO();\n\n    int getIndex();\n\n    void setCrispInput(float crispInput);\n\n    float getCrispInput();\n\n    bool addFuzzySet(FuzzySet* fuzzySet);\n\n    void resetFuzzySets();\n\n  protected:\n    int index;\n    float crispInput;\n    fuzzySetArray* fuzzySets;\n\n    void cleanFuzzySets(fuzzySetArray* aux);\n};\n#endif\n</code></pre>"},{"location":"eFLL-Reborn/_fuzzy_input_8h/","title":"File FuzzyInput.h","text":"<p>FileList &gt; eFLL &gt; FuzzyInput.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"FuzzyIO.h\"</code></li> </ul>"},{"location":"eFLL-Reborn/_fuzzy_input_8h/#classes","title":"Classes","text":"Type Name class FuzzyInput Class to manage fuzzy inputs. <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyInput.h</code></p>"},{"location":"eFLL-Reborn/_fuzzy_input_8h_source/","title":"File FuzzyInput.h","text":"<p>File List &gt; eFLL &gt; FuzzyInput.h</p> <p>Go to the documentation of this file</p> C++<pre><code>/*\n * Robotic Research Group (RRG)\n * State University of Piau\u00ed (UESPI), Brazil - Piau\u00ed - Teresina\n *\n * FuzzyInput.h\n *\n *      Author: AJ Alves &lt;aj.alves@zerokol.com&gt;\n *          Co authors: Dr. Ricardo Lira &lt;ricardor_usp@yahoo.com.br&gt;\n *                      Msc. Marvin Lemos &lt;marvinlemos@gmail.com&gt;\n *                      Douglas S. Kridi &lt;douglaskridi@gmail.com&gt;\n *                      Kannya Leal &lt;kannyal@hotmail.com&gt;\n */\n#ifndef FUZZYINPUT_H\n#define FUZZYINPUT_H\n\n// IMPORTING NECESSARY LIBRARIES\n#include \"FuzzyIO.h\"\n\nclass FuzzyInput : public FuzzyIO\n{\n  public:\n    FuzzyInput();\n\n    FuzzyInput(int index);\n\n    ~FuzzyInput();\n\n    bool calculateFuzzySetPertinences();\n};\n#endif\n</code></pre>"},{"location":"eFLL-Reborn/_fuzzy_output_8h/","title":"File FuzzyOutput.h","text":"<p>FileList &gt; eFLL &gt; FuzzyOutput.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"FuzzyComposition.h\"</code></li> <li><code>#include \"FuzzyIO.h\"</code></li> </ul>"},{"location":"eFLL-Reborn/_fuzzy_output_8h/#classes","title":"Classes","text":"Type Name class FuzzyOutput Class to manage fuzzy outputs. <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyOutput.h</code></p>"},{"location":"eFLL-Reborn/_fuzzy_output_8h_source/","title":"File FuzzyOutput.h","text":"<p>File List &gt; eFLL &gt; FuzzyOutput.h</p> <p>Go to the documentation of this file</p> C++<pre><code>/*\n * Robotic Research Group (RRG)\n * State University of Piau\u00ed (UESPI), Brazil - Piau\u00ed - Teresina\n *\n * FuzzyOutput.h\n *\n *      Author: AJ Alves &lt;aj.alves@zerokol.com&gt;\n *          Co authors: Dr. Ricardo Lira &lt;ricardor_usp@yahoo.com.br&gt;\n *                      Msc. Marvin Lemos &lt;marvinlemos@gmail.com&gt;\n *                      Douglas S. Kridi &lt;douglaskridi@gmail.com&gt;\n *                      Kannya Leal &lt;kannyal@hotmail.com&gt;\n */\n#ifndef FUZZYOUTPUT_H\n#define FUZZYOUTPUT_H\n\n// IMPORTING NECESSARY LIBRARIES\n#include \"FuzzyComposition.h\"\n#include \"FuzzyIO.h\"\n\nclass FuzzyOutput : public FuzzyIO\n{\n  public:\n    FuzzyOutput();\n\n    FuzzyOutput(int index);\n\n    ~FuzzyOutput();\n\n    bool truncate();\n\n    float getCrispOutput();\n\n\n    bool order();\n\n    FuzzyComposition* getFuzzyComposition();\n\n  private:\n    FuzzyComposition* fuzzyComposition;\n\n    bool swap(fuzzySetArray* fuzzySetA, fuzzySetArray* fuzzySetB);\n\n    bool rebuild(float x1,\n                 float y1,\n                 float x2,\n                 float y2,\n                 float x3,\n                 float y3,\n                 float x4,\n                 float y4,\n                 float* point,\n                 float* pertinence);\n};\n#endif\n</code></pre>"},{"location":"eFLL-Reborn/_fuzzy_rule_8h/","title":"File FuzzyRule.h","text":"<p>FileList &gt; eFLL &gt; FuzzyRule.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"FuzzyRuleAntecedent.h\"</code></li> <li><code>#include \"FuzzyRuleConsequent.h\"</code></li> </ul>"},{"location":"eFLL-Reborn/_fuzzy_rule_8h/#classes","title":"Classes","text":"Type Name class FuzzyRule Class to manage fuzzy rules. <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyRule.h</code></p>"},{"location":"eFLL-Reborn/_fuzzy_rule_8h_source/","title":"File FuzzyRule.h","text":"<p>File List &gt; eFLL &gt; FuzzyRule.h</p> <p>Go to the documentation of this file</p> C++<pre><code>/*\n * Robotic Research Group (RRG)\n * State University of Piau\u00ed (UESPI), Brazil - Piau\u00ed - Teresina\n *\n * FuzzyRule.h\n *\n *      Author: AJ Alves &lt;aj.alves@zerokol.com&gt;\n *          Co authors: Dr. Ricardo Lira &lt;ricardor_usp@yahoo.com.br&gt;\n *                      Msc. Marvin Lemos &lt;marvinlemos@gmail.com&gt;\n *                      Douglas S. Kridi &lt;douglaskridi@gmail.com&gt;\n *                      Kannya Leal &lt;kannyal@hotmail.com&gt;\n */\n#ifndef FUZZYRULE_H\n#define FUZZYRULE_H\n\n// IMPORTING NECESSARY LIBRARIES\n#include \"FuzzyRuleAntecedent.h\"\n#include \"FuzzyRuleConsequent.h\"\n\nclass FuzzyRule\n{\n  public:\n    FuzzyRule();\n\n    FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent);\n\n    int getIndex();\n\n    bool evaluateExpression();\n\n    bool isFired();\n\n  private:\n    int index;\n    bool fired;\n    FuzzyRuleAntecedent* fuzzyRuleAntecedent;\n    FuzzyRuleConsequent* fuzzyRuleConsequent;\n};\n#endif\n</code></pre>"},{"location":"eFLL-Reborn/_fuzzy_rule_antecedent_8h/","title":"File FuzzyRuleAntecedent.h","text":"<p>FileList &gt; eFLL &gt; FuzzyRuleAntecedent.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;stdlib.h&gt;</code></li> <li><code>#include \"FuzzySet.h\"</code></li> </ul>"},{"location":"eFLL-Reborn/_fuzzy_rule_antecedent_8h/#classes","title":"Classes","text":"Type Name class FuzzyRuleAntecedent Class to manage the antecedent of a fuzzy rule."},{"location":"eFLL-Reborn/_fuzzy_rule_antecedent_8h/#macros","title":"Macros","text":"Type Name define MODE_FRA_FRA <code>4</code>The mode for two FuzzyRuleAntecedents. define MODE_FS <code>1</code>The mode for a single FuzzySet . define MODE_FS_FRA <code>3</code>The mode for a FuzzySet and aFuzzyRuleAntecedent . define MODE_FS_FS <code>2</code>The mode for two FuzzySets. define OP_AND <code>1</code>The AND operator. define OP_OR <code>2</code>The OR operator."},{"location":"eFLL-Reborn/_fuzzy_rule_antecedent_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"eFLL-Reborn/_fuzzy_rule_antecedent_8h/#define-mode_fra_fra","title":"define MODE_FRA_FRA","text":"<p>The mode for two FuzzyRuleAntecedents. C++<pre><code>#define MODE_FRA_FRA `4`\n</code></pre></p>"},{"location":"eFLL-Reborn/_fuzzy_rule_antecedent_8h/#define-mode_fs","title":"define MODE_FS","text":"<p>The mode for a single FuzzySet . C++<pre><code>#define MODE_FS `1`\n</code></pre></p>"},{"location":"eFLL-Reborn/_fuzzy_rule_antecedent_8h/#define-mode_fs_fra","title":"define MODE_FS_FRA","text":"<p>The mode for a FuzzySet and aFuzzyRuleAntecedent . C++<pre><code>#define MODE_FS_FRA `3`\n</code></pre></p>"},{"location":"eFLL-Reborn/_fuzzy_rule_antecedent_8h/#define-mode_fs_fs","title":"define MODE_FS_FS","text":"<p>The mode for two FuzzySets. C++<pre><code>#define MODE_FS_FS `2`\n</code></pre></p>"},{"location":"eFLL-Reborn/_fuzzy_rule_antecedent_8h/#define-op_and","title":"define OP_AND","text":"<p>The AND operator. C++<pre><code>#define OP_AND `1`\n</code></pre></p>"},{"location":"eFLL-Reborn/_fuzzy_rule_antecedent_8h/#define-op_or","title":"define OP_OR","text":"<p>The OR operator. C++<pre><code>#define OP_OR `2`\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyRuleAntecedent.h</code></p>"},{"location":"eFLL-Reborn/_fuzzy_rule_antecedent_8h_source/","title":"File FuzzyRuleAntecedent.h","text":"<p>File List &gt; eFLL &gt; FuzzyRuleAntecedent.h</p> <p>Go to the documentation of this file</p> C++<pre><code>/*\n * Robotic Research Group (RRG)\n * State University of Piau\u00ed (UESPI), Brazil - Piau\u00ed - Teresina\n *\n * FuzzyRuleAntecedent.h\n *\n *      Author: AJ Alves &lt;aj.alves@zerokol.com&gt;\n *          Co authors: Dr. Ricardo Lira &lt;ricardor_usp@yahoo.com.br&gt;\n *                      Msc. Marvin Lemos &lt;marvinlemos@gmail.com&gt;\n *                      Douglas S. Kridi &lt;douglaskridi@gmail.com&gt;\n *                      Kannya Leal &lt;kannyal@hotmail.com&gt;\n */\n#ifndef FUZZYRULEANTECEDENT_H\n#define FUZZYRULEANTECEDENT_H\n\n// IMPORTING NECESSARY LIBRARIES\n#include &lt;stdlib.h&gt;\n\n#include \"FuzzySet.h\"\n\n// CONSTANTS\n// possible logic operators\n\n#define OP_AND 1\n#define OP_OR 2\n\n// possible join associations modes\n\n#define MODE_FS 1\n#define MODE_FS_FS 2\n#define MODE_FS_FRA 3\n#define MODE_FRA_FRA 4\n\nclass FuzzyRuleAntecedent\n{\n  public:\n    FuzzyRuleAntecedent();\n\n    bool joinSingle(FuzzySet* fuzzySet);\n\n    bool joinWithAND(FuzzySet* fuzzySet1, FuzzySet* fuzzySet2);\n\n    bool joinWithOR(FuzzySet* fuzzySet1, FuzzySet* fuzzySet2);\n\n    bool joinWithAND(FuzzySet* fuzzySet, FuzzyRuleAntecedent* fuzzyRuleAntecedent);\n\n    bool joinWithAND(FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzySet* fuzzySet);\n\n    bool joinWithOR(FuzzySet* fuzzySet, FuzzyRuleAntecedent* fuzzyRuleAntecedent);\n\n    bool joinWithOR(FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzySet* fuzzySet);\n\n    bool joinWithAND(FuzzyRuleAntecedent* fuzzyRuleAntecedent1, FuzzyRuleAntecedent* fuzzyRuleAntecedent2);\n\n    bool joinWithOR(FuzzyRuleAntecedent* fuzzyRuleAntecedent1, FuzzyRuleAntecedent* fuzzyRuleAntecedent2);\n\n    float evaluate();\n\n  private:\n    int op;\n    int mode;\n    FuzzySet* fuzzySet1;\n    FuzzySet* fuzzySet2;\n    FuzzyRuleAntecedent* fuzzyRuleAntecedent1;\n    FuzzyRuleAntecedent* fuzzyRuleAntecedent2;\n};\n#endif\n</code></pre>"},{"location":"eFLL-Reborn/_fuzzy_rule_consequent_8h/","title":"File FuzzyRuleConsequent.h","text":"<p>FileList &gt; eFLL &gt; FuzzyRuleConsequent.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;stdlib.h&gt;</code></li> <li><code>#include \"FuzzySet.h\"</code></li> </ul>"},{"location":"eFLL-Reborn/_fuzzy_rule_consequent_8h/#classes","title":"Classes","text":"Type Name class FuzzyRuleConsequent Class to manage the consequent of a fuzzy rule. struct fuzzySetOutputArray Linked list struct for FuzzySet objects. <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzyRuleConsequent.h</code></p>"},{"location":"eFLL-Reborn/_fuzzy_rule_consequent_8h_source/","title":"File FuzzyRuleConsequent.h","text":"<p>File List &gt; eFLL &gt; FuzzyRuleConsequent.h</p> <p>Go to the documentation of this file</p> C++<pre><code>/*\n * Robotic Research Group (RRG)\n * State University of Piau\u00ed (UESPI), Brazil - Piau\u00ed - Teresina\n *\n * FuzzyRuleConsequent.h\n *\n *      Author: AJ Alves &lt;aj.alves@zerokol.com&gt;\n *          Co authors: Dr. Ricardo Lira &lt;ricardor_usp@yahoo.com.br&gt;\n *                      Msc. Marvin Lemos &lt;marvinlemos@gmail.com&gt;\n *                      Douglas S. Kridi &lt;douglaskridi@gmail.com&gt;\n *                      Kannya Leal &lt;kannyal@hotmail.com&gt;\n */\n#ifndef FUZZYRULECONSEQUENT_H\n#define FUZZYRULECONSEQUENT_H\n\n// IMPORTING NECESSARY LIBRARIES\n#include &lt;stdlib.h&gt;\n\n#include \"FuzzySet.h\"\n\nstruct fuzzySetOutputArray\n{\n    FuzzySet* fuzzySet;\n    fuzzySetOutputArray* next;\n};\n\nclass FuzzyRuleConsequent\n{\n  public:\n    FuzzyRuleConsequent();\n\n    ~FuzzyRuleConsequent();\n\n    bool addOutput(FuzzySet* fuzzySet);\n\n    bool evaluate(float power);\n\n  private:\n    fuzzySetOutputArray* fuzzySetOutputs;\n\n    void cleanFuzzySets(fuzzySetOutputArray* aux);\n};\n#endif\n</code></pre>"},{"location":"eFLL-Reborn/_fuzzy_set_8h/","title":"File FuzzySet.h","text":"<p>FileList &gt; eFLL &gt; FuzzySet.h</p> <p>Go to the source code of this file</p>"},{"location":"eFLL-Reborn/_fuzzy_set_8h/#classes","title":"Classes","text":"Type Name class FuzzySet A class to manage a fuzzy set (shape) <p>The documentation for this class was generated from the following file <code>include/eFLL/FuzzySet.h</code></p>"},{"location":"eFLL-Reborn/_fuzzy_set_8h_source/","title":"File FuzzySet.h","text":"<p>File List &gt; eFLL &gt; FuzzySet.h</p> <p>Go to the documentation of this file</p> C++<pre><code>/*\n * Robotic Research Group (RRG)\n * State University of Piau\u00ed (UESPI), Brazil - Piau\u00ed - Teresina\n *\n * FuzzySet.h\n *\n *      Author: AJ Alves &lt;aj.alves@zerokol.com&gt;\n *          Co authors: Dr. Ricardo Lira &lt;ricardor_usp@yahoo.com.br&gt;\n *                      Msc. Marvin Lemos &lt;marvinlemos@gmail.com&gt;\n *                      Douglas S. Kridi &lt;douglaskridi@gmail.com&gt;\n *                      Kannya Leal &lt;kannyal@hotmail.com&gt;\n */\n#ifndef FUZZYSET_H\n#define FUZZYSET_H\n\nclass FuzzySet\n{\n  public:\n    FuzzySet();\n\n    FuzzySet(float a, float b, float c, float d);\n\n    float getPointA();\n\n    float getPointB();\n\n    float getPointC();\n\n    float getPointD();\n\n    bool calculatePertinence(float crispValue);\n\n    void setPertinence(float pertinence);\n\n    float getPertinence();\n\n    void reset();\n\n  private:\n    float a;\n    float b;\n    float c;\n    float d;\n    float pertinence;\n};\n#endif\n</code></pre>"},{"location":"eFLL-Reborn/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p>"},{"location":"eFLL-Reborn/classes/","title":"Class Index","text":""},{"location":"eFLL-Reborn/classes/#f","title":"f","text":"<ul> <li>Fuzzy</li> <li>FuzzyComposition</li> <li>FuzzyInput</li> <li>fuzzyInputArray</li> <li>FuzzyIO</li> <li>FuzzyOutput</li> <li>fuzzyOutputArray</li> <li>FuzzyRule</li> <li>FuzzyRuleAntecedent</li> <li>fuzzyRuleArray</li> <li>FuzzyRuleConsequent</li> <li>FuzzySet</li> <li>fuzzySetArray</li> <li>fuzzySetOutputArray</li> </ul>"},{"location":"eFLL-Reborn/classes/#p","title":"p","text":"<ul> <li>pointsArray</li> </ul>"},{"location":"eFLL-Reborn/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class Fuzzy The main class of the eFLL library. This class is responsible for managing the fuzzy logic system. From adding inputs and outputs to the system, to defining rules and calculating the output. </li> <li>class FuzzyComposition A class to manage the composition of points and pertinences for a FuzzyOutput .</li> <li>class FuzzyIO Class to manage fuzzy inputs and outputs. Base class for FuzzyInput andFuzzyOutput . <ul> <li>class FuzzyInput Class to manage fuzzy inputs. </li> <li>class FuzzyOutput Class to manage fuzzy outputs. </li> </ul> </li> <li>class FuzzyRule Class to manage fuzzy rules. </li> <li>class FuzzyRuleAntecedent Class to manage the antecedent of a fuzzy rule. </li> <li>class FuzzyRuleConsequent Class to manage the consequent of a fuzzy rule. </li> <li>class FuzzySet A class to manage a fuzzy set (shape) </li> <li>struct fuzzyInputArray Linked list struct for FuzzyInput objects.</li> <li>struct fuzzyOutputArray Linked list struct for FuzzyOutput objects.</li> <li>struct fuzzyRuleArray Linked list struct for FuzzyRule objects.</li> <li>struct fuzzySetArray Linked list struct for FuzzySet objects.</li> <li>struct fuzzySetOutputArray Linked list struct for FuzzySet objects.</li> <li>struct pointsArray Linked list struct for a point and its pertinence. </li> </ul>"},{"location":"eFLL-Reborn/modules/","title":"Modules","text":"<p>No modules found.</p>"},{"location":"eFLL-Reborn/pages/","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"eFLL-Reborn/class_members/","title":"Class Members","text":""},{"location":"eFLL-Reborn/class_members/#a","title":"a","text":"<ul> <li>addFuzzyInput (Fuzzy)</li> <li>addFuzzyOutput (Fuzzy)</li> <li>addFuzzyRule (Fuzzy)</li> <li>addPoint (FuzzyComposition)</li> <li>addFuzzySet (FuzzyIO)</li> <li>addOutput (FuzzyRuleConsequent)</li> <li>a (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#b","title":"b","text":"<ul> <li>build (FuzzyComposition)</li> <li>b (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#c","title":"c","text":"<ul> <li>cleanFuzzyInputs (Fuzzy)</li> <li>cleanFuzzyOutputs (Fuzzy)</li> <li>cleanFuzzyRules (Fuzzy)</li> <li>calculate (FuzzyComposition)</li> <li>checkPoint (FuzzyComposition)</li> <li>cleanPoints (FuzzyComposition)</li> <li>countPoints (FuzzyComposition)</li> <li>cleanFuzzySets (FuzzyIO, FuzzyRuleConsequent)</li> <li>crispInput (FuzzyIO)</li> <li>calculateFuzzySetPertinences (FuzzyInput)</li> <li>c (FuzzySet)</li> <li>calculatePertinence (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#d","title":"d","text":"<ul> <li>defuzzify (Fuzzy)</li> <li>d (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#e","title":"e","text":"<ul> <li>empty (FuzzyComposition)</li> <li>evaluateExpression (FuzzyRule)</li> <li>evaluate (FuzzyRuleAntecedent, FuzzyRuleConsequent)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#f","title":"f","text":"<ul> <li>Fuzzy (Fuzzy)</li> <li>fuzzify (Fuzzy)</li> <li>fuzzyInputs (Fuzzy)</li> <li>fuzzyOutputs (Fuzzy)</li> <li>fuzzyRules (Fuzzy)</li> <li>FuzzyComposition (FuzzyComposition)</li> <li>FuzzyIO (FuzzyIO)</li> <li>fuzzySets (FuzzyIO)</li> <li>FuzzyInput (FuzzyInput)</li> <li>FuzzyOutput (FuzzyOutput)</li> <li>fuzzyComposition (FuzzyOutput)</li> <li>FuzzyRule (FuzzyRule)</li> <li>fired (FuzzyRule)</li> <li>fuzzyRuleAntecedent (FuzzyRule)</li> <li>fuzzyRuleConsequent (FuzzyRule)</li> <li>FuzzyRuleAntecedent (FuzzyRuleAntecedent)</li> <li>fuzzyRuleAntecedent1 (FuzzyRuleAntecedent)</li> <li>fuzzyRuleAntecedent2 (FuzzyRuleAntecedent)</li> <li>fuzzySet1 (FuzzyRuleAntecedent)</li> <li>fuzzySet2 (FuzzyRuleAntecedent)</li> <li>FuzzyRuleConsequent (FuzzyRuleConsequent)</li> <li>fuzzySetOutputs (FuzzyRuleConsequent)</li> <li>FuzzySet (FuzzySet)</li> <li>fuzzyInput (fuzzyInputArray)</li> <li>fuzzyOutput (fuzzyOutputArray)</li> <li>fuzzyRule (fuzzyRuleArray)</li> <li>fuzzySet (fuzzySetArray, fuzzySetOutputArray)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#g","title":"g","text":"<ul> <li>getCrispInput (FuzzyIO)</li> <li>getIndex (FuzzyIO, FuzzyRule)</li> <li>getCrispOutput (FuzzyOutput)</li> <li>getFuzzyComposition (FuzzyOutput)</li> <li>getPertinence (FuzzySet)</li> <li>getPointA (FuzzySet)</li> <li>getPointB (FuzzySet)</li> <li>getPointC (FuzzySet)</li> <li>getPointD (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#i","title":"i","text":"<ul> <li>isFiredRule (Fuzzy)</li> <li>index (FuzzyIO, FuzzyRule)</li> <li>isFired (FuzzyRule)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#j","title":"j","text":"<ul> <li>joinSingle (FuzzyRuleAntecedent)</li> <li>joinWithAND (FuzzyRuleAntecedent)</li> <li>joinWithOR (FuzzyRuleAntecedent)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#m","title":"m","text":"<ul> <li>mode (FuzzyRuleAntecedent)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#n","title":"n","text":"<ul> <li>next (fuzzyInputArray, fuzzyOutputArray, fuzzyRuleArray, fuzzySetArray, fuzzySetOutputArray, pointsArray)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#o","title":"o","text":"<ul> <li>order (FuzzyOutput)</li> <li>op (FuzzyRuleAntecedent)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#p","title":"p","text":"<ul> <li>points (FuzzyComposition)</li> <li>pertinence (FuzzySet, pointsArray)</li> <li>point (pointsArray)</li> <li>previous (pointsArray)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#r","title":"r","text":"<ul> <li>rebuild (FuzzyComposition, FuzzyOutput)</li> <li>rmvPoint (FuzzyComposition)</li> <li>resetFuzzySets (FuzzyIO)</li> <li>reset (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#s","title":"s","text":"<ul> <li>setInput (Fuzzy)</li> <li>setCrispInput (FuzzyIO)</li> <li>swap (FuzzyOutput)</li> <li>setPertinence (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#t","title":"t","text":"<ul> <li>truncate (FuzzyOutput)</li> </ul>"},{"location":"eFLL-Reborn/class_members/#_1","title":"~","text":"<ul> <li>~Fuzzy (Fuzzy)</li> <li>~FuzzyComposition (FuzzyComposition)</li> <li>~FuzzyIO (FuzzyIO)</li> <li>~FuzzyInput (FuzzyInput)</li> <li>~FuzzyOutput (FuzzyOutput)</li> <li>~FuzzyRuleConsequent (FuzzyRuleConsequent)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/","title":"Class Member Functions","text":""},{"location":"eFLL-Reborn/class_member_functions/#a","title":"a","text":"<ul> <li>addFuzzyInput (Fuzzy)</li> <li>addFuzzyOutput (Fuzzy)</li> <li>addFuzzyRule (Fuzzy)</li> <li>addPoint (FuzzyComposition)</li> <li>addFuzzySet (FuzzyIO)</li> <li>addOutput (FuzzyRuleConsequent)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#b","title":"b","text":"<ul> <li>build (FuzzyComposition)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#c","title":"c","text":"<ul> <li>cleanFuzzyInputs (Fuzzy)</li> <li>cleanFuzzyOutputs (Fuzzy)</li> <li>cleanFuzzyRules (Fuzzy)</li> <li>calculate (FuzzyComposition)</li> <li>checkPoint (FuzzyComposition)</li> <li>cleanPoints (FuzzyComposition)</li> <li>countPoints (FuzzyComposition)</li> <li>cleanFuzzySets (FuzzyIO, FuzzyRuleConsequent)</li> <li>calculateFuzzySetPertinences (FuzzyInput)</li> <li>calculatePertinence (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#d","title":"d","text":"<ul> <li>defuzzify (Fuzzy)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#e","title":"e","text":"<ul> <li>empty (FuzzyComposition)</li> <li>evaluateExpression (FuzzyRule)</li> <li>evaluate (FuzzyRuleAntecedent, FuzzyRuleConsequent)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#f","title":"f","text":"<ul> <li>Fuzzy (Fuzzy)</li> <li>fuzzify (Fuzzy)</li> <li>FuzzyComposition (FuzzyComposition)</li> <li>FuzzyIO (FuzzyIO)</li> <li>FuzzyInput (FuzzyInput)</li> <li>FuzzyOutput (FuzzyOutput)</li> <li>FuzzyRule (FuzzyRule)</li> <li>FuzzyRuleAntecedent (FuzzyRuleAntecedent)</li> <li>FuzzyRuleConsequent (FuzzyRuleConsequent)</li> <li>FuzzySet (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#g","title":"g","text":"<ul> <li>getCrispInput (FuzzyIO)</li> <li>getIndex (FuzzyIO, FuzzyRule)</li> <li>getCrispOutput (FuzzyOutput)</li> <li>getFuzzyComposition (FuzzyOutput)</li> <li>getPertinence (FuzzySet)</li> <li>getPointA (FuzzySet)</li> <li>getPointB (FuzzySet)</li> <li>getPointC (FuzzySet)</li> <li>getPointD (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#i","title":"i","text":"<ul> <li>isFiredRule (Fuzzy)</li> <li>isFired (FuzzyRule)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#j","title":"j","text":"<ul> <li>joinSingle (FuzzyRuleAntecedent)</li> <li>joinWithAND (FuzzyRuleAntecedent)</li> <li>joinWithOR (FuzzyRuleAntecedent)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#o","title":"o","text":"<ul> <li>order (FuzzyOutput)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#r","title":"r","text":"<ul> <li>rebuild (FuzzyComposition, FuzzyOutput)</li> <li>rmvPoint (FuzzyComposition)</li> <li>resetFuzzySets (FuzzyIO)</li> <li>reset (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#s","title":"s","text":"<ul> <li>setInput (Fuzzy)</li> <li>setCrispInput (FuzzyIO)</li> <li>swap (FuzzyOutput)</li> <li>setPertinence (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#t","title":"t","text":"<ul> <li>truncate (FuzzyOutput)</li> </ul>"},{"location":"eFLL-Reborn/class_member_functions/#_1","title":"~","text":"<ul> <li>~Fuzzy (Fuzzy)</li> <li>~FuzzyComposition (FuzzyComposition)</li> <li>~FuzzyIO (FuzzyIO)</li> <li>~FuzzyInput (FuzzyInput)</li> <li>~FuzzyOutput (FuzzyOutput)</li> <li>~FuzzyRuleConsequent (FuzzyRuleConsequent)</li> </ul>"},{"location":"eFLL-Reborn/class_member_variables/","title":"Class Member Variables","text":""},{"location":"eFLL-Reborn/class_member_variables/#a","title":"a","text":"<ul> <li>a (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_member_variables/#b","title":"b","text":"<ul> <li>b (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_member_variables/#c","title":"c","text":"<ul> <li>crispInput (FuzzyIO)</li> <li>c (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_member_variables/#d","title":"d","text":"<ul> <li>d (FuzzySet)</li> </ul>"},{"location":"eFLL-Reborn/class_member_variables/#f","title":"f","text":"<ul> <li>fuzzyInputs (Fuzzy)</li> <li>fuzzyOutputs (Fuzzy)</li> <li>fuzzyRules (Fuzzy)</li> <li>fuzzySets (FuzzyIO)</li> <li>fuzzyComposition (FuzzyOutput)</li> <li>fired (FuzzyRule)</li> <li>fuzzyRuleAntecedent (FuzzyRule)</li> <li>fuzzyRuleConsequent (FuzzyRule)</li> <li>fuzzyRuleAntecedent1 (FuzzyRuleAntecedent)</li> <li>fuzzyRuleAntecedent2 (FuzzyRuleAntecedent)</li> <li>fuzzySet1 (FuzzyRuleAntecedent)</li> <li>fuzzySet2 (FuzzyRuleAntecedent)</li> <li>fuzzySetOutputs (FuzzyRuleConsequent)</li> <li>fuzzyInput (fuzzyInputArray)</li> <li>fuzzyOutput (fuzzyOutputArray)</li> <li>fuzzyRule (fuzzyRuleArray)</li> <li>fuzzySet (fuzzySetArray, fuzzySetOutputArray)</li> </ul>"},{"location":"eFLL-Reborn/class_member_variables/#i","title":"i","text":"<ul> <li>index (FuzzyIO, FuzzyRule)</li> </ul>"},{"location":"eFLL-Reborn/class_member_variables/#m","title":"m","text":"<ul> <li>mode (FuzzyRuleAntecedent)</li> </ul>"},{"location":"eFLL-Reborn/class_member_variables/#n","title":"n","text":"<ul> <li>next (fuzzyInputArray, fuzzyOutputArray, fuzzyRuleArray, fuzzySetArray, fuzzySetOutputArray, pointsArray)</li> </ul>"},{"location":"eFLL-Reborn/class_member_variables/#o","title":"o","text":"<ul> <li>op (FuzzyRuleAntecedent)</li> </ul>"},{"location":"eFLL-Reborn/class_member_variables/#p","title":"p","text":"<ul> <li>points (FuzzyComposition)</li> <li>pertinence (FuzzySet, pointsArray)</li> <li>point (pointsArray)</li> <li>previous (pointsArray)</li> </ul>"},{"location":"eFLL-Reborn/class_member_typedefs/","title":"Class Member Typedefs","text":"<p>Nothing related to Class Member Typedefs found.</p>"},{"location":"eFLL-Reborn/class_member_enums/","title":"Class Member Enums","text":"<p>Nothing related to Class Member Enums found.</p>"},{"location":"eFLL-Reborn/namespace_members/","title":"Namespace Members","text":"<p>Nothing related to Namespace Members found.</p>"},{"location":"eFLL-Reborn/namespace_member_functions/","title":"Namespace Member Functions","text":"<p>Nothing related to Namespace Member Functions found.</p>"},{"location":"eFLL-Reborn/namespace_member_variables/","title":"Namespace Member Variables","text":"<p>Nothing related to Namespace Member Variables found.</p>"},{"location":"eFLL-Reborn/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":"<p>Nothing related to Namespace Member Typedefs found.</p>"},{"location":"eFLL-Reborn/namespace_member_enums/","title":"Namespace Member Enums","text":"<p>Nothing related to Namespace Member Enums found.</p>"},{"location":"eFLL-Reborn/functions/","title":"Functions","text":"<p>Nothing related to Functions found.</p>"},{"location":"eFLL-Reborn/macros/","title":"Macros","text":""},{"location":"eFLL-Reborn/macros/#e","title":"e","text":"<ul> <li>EPSILON_VALUE (FuzzyComposition.h)</li> </ul>"},{"location":"eFLL-Reborn/macros/#m","title":"m","text":"<ul> <li>MODE_FRA_FRA (FuzzyRuleAntecedent.h)</li> <li>MODE_FS (FuzzyRuleAntecedent.h)</li> <li>MODE_FS_FRA (FuzzyRuleAntecedent.h)</li> <li>MODE_FS_FS (FuzzyRuleAntecedent.h)</li> </ul>"},{"location":"eFLL-Reborn/macros/#o","title":"o","text":"<ul> <li>OP_AND (FuzzyRuleAntecedent.h)</li> <li>OP_OR (FuzzyRuleAntecedent.h)</li> </ul>"},{"location":"eFLL-Reborn/variables/","title":"Variables","text":"<p>Nothing related to Variables found.</p>"},{"location":"eFLL-Reborn/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}