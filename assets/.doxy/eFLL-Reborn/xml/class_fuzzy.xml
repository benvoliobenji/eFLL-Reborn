<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_fuzzy" kind="class" language="C++" prot="public">
    <compoundname>Fuzzy</compoundname>
    <includes refid="_fuzzy_8h" local="no">Fuzzy.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_fuzzy_1a1fa273e728f30aaea68dc1612e78464f" prot="private" static="no" mutable="no">
        <type><ref refid="structfuzzy_input_array" kindref="compound">fuzzyInputArray</ref> *</type>
        <definition>fuzzyInputArray* Fuzzy::fuzzyInputs</definition>
        <argsstring></argsstring>
        <name>fuzzyInputs</name>
        <qualifiedname>Fuzzy::fuzzyInputs</qualifiedname>
        <briefdescription>
<para>Pointer to the first <ref refid="class_fuzzy_input" kindref="compound">FuzzyInput</ref> in the linked list of FuzzyInputs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="142" column="21" bodyfile="include/eFLL/Fuzzy.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_fuzzy_1ac5923937fd79510ec2d42f46d6540b31" prot="private" static="no" mutable="no">
        <type><ref refid="structfuzzy_output_array" kindref="compound">fuzzyOutputArray</ref> *</type>
        <definition>fuzzyOutputArray* Fuzzy::fuzzyOutputs</definition>
        <argsstring></argsstring>
        <name>fuzzyOutputs</name>
        <qualifiedname>Fuzzy::fuzzyOutputs</qualifiedname>
        <briefdescription>
<para>Pointer to the first <ref refid="class_fuzzy_output" kindref="compound">FuzzyOutput</ref> in the linked list of FuzzyOutputs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="144" column="22" bodyfile="include/eFLL/Fuzzy.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_fuzzy_1a767ea98794cc75d30c6f32179fd6f619" prot="private" static="no" mutable="no">
        <type><ref refid="structfuzzy_rule_array" kindref="compound">fuzzyRuleArray</ref> *</type>
        <definition>fuzzyRuleArray* Fuzzy::fuzzyRules</definition>
        <argsstring></argsstring>
        <name>fuzzyRules</name>
        <qualifiedname>Fuzzy::fuzzyRules</qualifiedname>
        <briefdescription>
<para>Pointer to the first <ref refid="class_fuzzy_rule" kindref="compound">FuzzyRule</ref> in the linked list of FuzzyRules. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="146" column="20" bodyfile="include/eFLL/Fuzzy.h" bodystart="146" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_fuzzy_1a87eb15e0587a3003f970179afbc6043b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Fuzzy::Fuzzy</definition>
        <argsstring>()</argsstring>
        <name>Fuzzy</name>
        <qualifiedname>Fuzzy::Fuzzy</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="62" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_fuzzy_1aaf4a559322e94153bf6085dd2e96e80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Fuzzy::~Fuzzy</definition>
        <argsstring>()</argsstring>
        <name>~Fuzzy</name>
        <qualifiedname>Fuzzy::~Fuzzy</qualifiedname>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="65" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_fuzzy_1a3249ff926ca45541906dd1865f13baaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Fuzzy::addFuzzyInput</definition>
        <argsstring>(FuzzyInput *fuzzyInput)</argsstring>
        <name>addFuzzyInput</name>
        <qualifiedname>Fuzzy::addFuzzyInput</qualifiedname>
        <param>
          <type><ref refid="class_fuzzy_input" kindref="compound">FuzzyInput</ref> *</type>
          <declname>fuzzyInput</declname>
        </param>
        <briefdescription>
<para>Add a new <ref refid="class_fuzzy_input" kindref="compound">FuzzyInput</ref> to the fuzzy logic system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>will malloc a new <ref refid="structfuzzy_input_array" kindref="compound">fuzzyInputArray</ref> struct and add it to the linked list of fuzzyInputs. Uses the provided pointer to the <ref refid="class_fuzzy_input" kindref="compound">FuzzyInput</ref> object as the fuzzyInput member of the new <ref refid="structfuzzy_input_array" kindref="compound">fuzzyInputArray</ref> struct.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fuzzyInput</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="class_fuzzy_input" kindref="compound">FuzzyInput</ref> object to add to the system. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if the <ref refid="class_fuzzy_input" kindref="compound">FuzzyInput</ref> was added successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if the <ref refid="class_fuzzy_input" kindref="compound">FuzzyInput</ref> could not be added or memory could not be allocated to add the new input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="77" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_fuzzy_1a63dd6b88f43d4bf5c7465231a8f7eb4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Fuzzy::addFuzzyOutput</definition>
        <argsstring>(FuzzyOutput *fuzzyOutput)</argsstring>
        <name>addFuzzyOutput</name>
        <qualifiedname>Fuzzy::addFuzzyOutput</qualifiedname>
        <param>
          <type><ref refid="class_fuzzy_output" kindref="compound">FuzzyOutput</ref> *</type>
          <declname>fuzzyOutput</declname>
        </param>
        <briefdescription>
<para>Add a new <ref refid="class_fuzzy_output" kindref="compound">FuzzyOutput</ref> to the fuzzy logic system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>will malloc a new <ref refid="structfuzzy_output_array" kindref="compound">fuzzyOutputArray</ref> struct and add it to the linked list of fuzzyOutputs. Uses the provided pointer to the <ref refid="class_fuzzy_output" kindref="compound">FuzzyOutput</ref> object as the fuzzyOutput member of the new <ref refid="structfuzzy_output_array" kindref="compound">fuzzyOutputArray</ref> struct.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fuzzyOutput</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="class_fuzzy_output" kindref="compound">FuzzyOutput</ref> object to add to the system. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if the <ref refid="class_fuzzy_output" kindref="compound">FuzzyOutput</ref> was added successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if the <ref refid="class_fuzzy_output" kindref="compound">FuzzyOutput</ref> could not be added or memory could not be allocated to add the new output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="89" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_fuzzy_1ad0c66e89b0e3ebbe60373216e59d6039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Fuzzy::addFuzzyRule</definition>
        <argsstring>(FuzzyRule *fuzzyRule)</argsstring>
        <name>addFuzzyRule</name>
        <qualifiedname>Fuzzy::addFuzzyRule</qualifiedname>
        <param>
          <type><ref refid="class_fuzzy_rule" kindref="compound">FuzzyRule</ref> *</type>
          <declname>fuzzyRule</declname>
        </param>
        <briefdescription>
<para>Add a new <ref refid="class_fuzzy_rule" kindref="compound">FuzzyRule</ref> to the fuzzy logic system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>will malloc a new <ref refid="structfuzzy_rule_array" kindref="compound">fuzzyRuleArray</ref> struct and add it to the linked list of fuzzyRules. Uses the provided pointer to the <ref refid="class_fuzzy_rule" kindref="compound">FuzzyRule</ref> object as the fuzzyRule member of the new <ref refid="structfuzzy_rule_array" kindref="compound">fuzzyRuleArray</ref> struct.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fuzzyRule</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="class_fuzzy_rule" kindref="compound">FuzzyRule</ref> object to add to the system. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if the <ref refid="class_fuzzy_rule" kindref="compound">FuzzyRule</ref> was added successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if the <ref refid="class_fuzzy_rule" kindref="compound">FuzzyRule</ref> could not be added or memory could not be allocated to add the new rule. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="101" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_fuzzy_1aa2732d9bef035d45df0c4a39510b786d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Fuzzy::setInput</definition>
        <argsstring>(int fuzzyInputIndex, float crispValue)</argsstring>
        <name>setInput</name>
        <qualifiedname>Fuzzy::setInput</qualifiedname>
        <param>
          <type>int</type>
          <declname>fuzzyInputIndex</declname>
        </param>
        <param>
          <type>float</type>
          <declname>crispValue</declname>
        </param>
        <briefdescription>
<para>Set the crisp value of the <ref refid="class_fuzzy_input" kindref="compound">FuzzyInput</ref> at the provided index. The crisp value is the value that the <ref refid="class_fuzzy_input" kindref="compound">FuzzyInput</ref> will be evaluated against to determine the pertinence of the FuzzySets in the input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fuzzyInputIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the <ref refid="class_fuzzy_input" kindref="compound">FuzzyInput</ref> to set the crisp value for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">crispValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The crisp value to set for the <ref refid="class_fuzzy_input" kindref="compound">FuzzyInput</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if the crisp value was set successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if the <ref refid="class_fuzzy_input" kindref="compound">FuzzyInput</ref> at the provided index could not be found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="113" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_fuzzy_1aec44e9fc9cb94cf1332e144aa4a49ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Fuzzy::fuzzify</definition>
        <argsstring>()</argsstring>
        <name>fuzzify</name>
        <qualifiedname>Fuzzy::fuzzify</qualifiedname>
        <briefdescription>
<para>Calculate and store the result of a fuzzification for each <ref refid="class_fuzzy_output" kindref="compound">FuzzyOutput</ref> given the current crisp values of the FuzzyInputs and the rules provided to the system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true will always return true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="121" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_fuzzy_1a318b00a3e4e8ce14b938d9f39758de61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Fuzzy::isFiredRule</definition>
        <argsstring>(int fuzzyRuleIndex)</argsstring>
        <name>isFiredRule</name>
        <qualifiedname>Fuzzy::isFiredRule</qualifiedname>
        <param>
          <type>int</type>
          <declname>fuzzyRuleIndex</declname>
        </param>
        <briefdescription>
<para>Check if the <ref refid="class_fuzzy_rule" kindref="compound">FuzzyRule</ref> at the provided index was triggered durring fuzzification. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fuzzyRuleIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the <ref refid="class_fuzzy_rule" kindref="compound">FuzzyRule</ref> to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if the <ref refid="class_fuzzy_rule" kindref="compound">FuzzyRule</ref> was triggered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if the <ref refid="class_fuzzy_rule" kindref="compound">FuzzyRule</ref> was not triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="130" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_fuzzy_1ac19899b207a6202e80ee695cc4750359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Fuzzy::defuzzify</definition>
        <argsstring>(int fuzzyOutputIndex)</argsstring>
        <name>defuzzify</name>
        <qualifiedname>Fuzzy::defuzzify</qualifiedname>
        <param>
          <type>int</type>
          <declname>fuzzyOutputIndex</declname>
        </param>
        <briefdescription>
<para>Defuzzify the output of a <ref refid="class_fuzzy_output" kindref="compound">FuzzyOutput</ref> at the provided index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fuzzyOutputIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the <ref refid="class_fuzzy_output" kindref="compound">FuzzyOutput</ref> to defuzzify. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float The result of fuzzification for that <ref refid="class_fuzzy_output" kindref="compound">FuzzyOutput</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="138" column="11"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_fuzzy_1aa543d3eea7b9ece15ba6aa2cc93c6010" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Fuzzy::cleanFuzzyInputs</definition>
        <argsstring>(fuzzyInputArray *aux)</argsstring>
        <name>cleanFuzzyInputs</name>
        <qualifiedname>Fuzzy::cleanFuzzyInputs</qualifiedname>
        <param>
          <type><ref refid="structfuzzy_input_array" kindref="compound">fuzzyInputArray</ref> *</type>
          <declname>aux</declname>
        </param>
        <briefdescription>
<para>Clean up the linked list of FuzzyInputs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>calls free() on the provided <ref refid="structfuzzy_input_array" kindref="compound">fuzzyInputArray</ref> struct and all of its children.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aux</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first <ref refid="structfuzzy_input_array" kindref="compound">fuzzyInputArray</ref> struct in the linked list to clean up. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="155" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_fuzzy_1ac6e2019eba7b928b4f84f8990fe1a68f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Fuzzy::cleanFuzzyOutputs</definition>
        <argsstring>(fuzzyOutputArray *aux)</argsstring>
        <name>cleanFuzzyOutputs</name>
        <qualifiedname>Fuzzy::cleanFuzzyOutputs</qualifiedname>
        <param>
          <type><ref refid="structfuzzy_output_array" kindref="compound">fuzzyOutputArray</ref> *</type>
          <declname>aux</declname>
        </param>
        <briefdescription>
<para>Clean up the linked list of FuzzyOutputs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>calls free() on the provided <ref refid="structfuzzy_output_array" kindref="compound">fuzzyOutputArray</ref> struct and all of its children.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aux</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first <ref refid="structfuzzy_output_array" kindref="compound">fuzzyOutputArray</ref> struct in the linked list to clean up. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="164" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_fuzzy_1ae4daf78a3af31807db660ae57b78b7af" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Fuzzy::cleanFuzzyRules</definition>
        <argsstring>(fuzzyRuleArray *aux)</argsstring>
        <name>cleanFuzzyRules</name>
        <qualifiedname>Fuzzy::cleanFuzzyRules</qualifiedname>
        <param>
          <type><ref refid="structfuzzy_rule_array" kindref="compound">fuzzyRuleArray</ref> *</type>
          <declname>aux</declname>
        </param>
        <briefdescription>
<para>Clean up the linked list of FuzzyRules. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>calls free() on the provided <ref refid="structfuzzy_rule_array" kindref="compound">fuzzyRuleArray</ref> struct and all of its children.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">aux</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first <ref refid="structfuzzy_rule_array" kindref="compound">fuzzyRuleArray</ref> struct in the linked list to clean up. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eFLL/Fuzzy.h" line="173" column="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The main class of the eFLL library. This class is responsible for managing the fuzzy logic system. From adding inputs and outputs to the system, to defining rules and calculating the output. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/eFLL/Fuzzy.h" line="58" column="1" bodyfile="include/eFLL/Fuzzy.h" bodystart="59" bodyend="174"/>
    <listofallmembers>
      <member refid="class_fuzzy_1a3249ff926ca45541906dd1865f13baaa" prot="public" virt="non-virtual"><scope>Fuzzy</scope><name>addFuzzyInput</name></member>
      <member refid="class_fuzzy_1a63dd6b88f43d4bf5c7465231a8f7eb4a" prot="public" virt="non-virtual"><scope>Fuzzy</scope><name>addFuzzyOutput</name></member>
      <member refid="class_fuzzy_1ad0c66e89b0e3ebbe60373216e59d6039" prot="public" virt="non-virtual"><scope>Fuzzy</scope><name>addFuzzyRule</name></member>
      <member refid="class_fuzzy_1aa543d3eea7b9ece15ba6aa2cc93c6010" prot="private" virt="non-virtual"><scope>Fuzzy</scope><name>cleanFuzzyInputs</name></member>
      <member refid="class_fuzzy_1ac6e2019eba7b928b4f84f8990fe1a68f" prot="private" virt="non-virtual"><scope>Fuzzy</scope><name>cleanFuzzyOutputs</name></member>
      <member refid="class_fuzzy_1ae4daf78a3af31807db660ae57b78b7af" prot="private" virt="non-virtual"><scope>Fuzzy</scope><name>cleanFuzzyRules</name></member>
      <member refid="class_fuzzy_1ac19899b207a6202e80ee695cc4750359" prot="public" virt="non-virtual"><scope>Fuzzy</scope><name>defuzzify</name></member>
      <member refid="class_fuzzy_1aec44e9fc9cb94cf1332e144aa4a49ada" prot="public" virt="non-virtual"><scope>Fuzzy</scope><name>fuzzify</name></member>
      <member refid="class_fuzzy_1a87eb15e0587a3003f970179afbc6043b" prot="public" virt="non-virtual"><scope>Fuzzy</scope><name>Fuzzy</name></member>
      <member refid="class_fuzzy_1a1fa273e728f30aaea68dc1612e78464f" prot="private" virt="non-virtual"><scope>Fuzzy</scope><name>fuzzyInputs</name></member>
      <member refid="class_fuzzy_1ac5923937fd79510ec2d42f46d6540b31" prot="private" virt="non-virtual"><scope>Fuzzy</scope><name>fuzzyOutputs</name></member>
      <member refid="class_fuzzy_1a767ea98794cc75d30c6f32179fd6f619" prot="private" virt="non-virtual"><scope>Fuzzy</scope><name>fuzzyRules</name></member>
      <member refid="class_fuzzy_1a318b00a3e4e8ce14b938d9f39758de61" prot="public" virt="non-virtual"><scope>Fuzzy</scope><name>isFiredRule</name></member>
      <member refid="class_fuzzy_1aa2732d9bef035d45df0c4a39510b786d" prot="public" virt="non-virtual"><scope>Fuzzy</scope><name>setInput</name></member>
      <member refid="class_fuzzy_1aaf4a559322e94153bf6085dd2e96e80e" prot="public" virt="non-virtual"><scope>Fuzzy</scope><name>~Fuzzy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
