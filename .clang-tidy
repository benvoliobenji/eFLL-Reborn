---
Checks: >
  clang-diagnostic-*,
  -clang-diagnostic-unused-command-line-argument,
  clang-analyzer-*,
  cppcoreguidelines-*,
  # -cppcoreguidelines-pro-type-reinterpret-cast,
  -cppcoreguidelines-pro-type-vararg,
  -cppcoreguidelines-avoid-magic-numbers,
  # -cppcoreguidelines-special-member-functions,
  # -cppcoreguidelines-avoid-c-arrays,
  # -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  modernize-*,
  -modernize-use-std-print,
  -modernize-use-trailing-return-type,
  # -modernize-use-nodiscard,
  # -modernize-avoid-c-arrays,
  readability-*,
  -readability-identifier-length, #Removed due to legacy code
  -readability-magic-numbers,

WarningsAsErrors: ""

HeaderFilterRegex: '.*(src|include)[\/\\]eFLL[\/\\].+\.h'

FormatStyle: file
CheckOptions:
  # cppcoreguidelines
  - {
      key: cppcoreguidelines-explicit-virtual-functions.IgnoreDestructors,
      value: "1",
    }
  - {
      key: cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic,
      value: "1",
    }
  # readability
  - {
      key: readability-braces-around-statements.ShortStatementLines,
      value: "4",
    }
  - {
      key: readability-uppercase-literal-suffix.NewSuffixes,
      value: "L;LL;LU;LLU",
    }
  - {
      key: readability-implicit-bool-conversion.AllowPointerConditions,
      value: true,
    }
  - { key: readability-function-cognitive-complexity.Threshold, value: "50" }
  # readability-identifier-naming
  - { key: readability-identifier-naming.ClassCase, value: CamelCase }
  - {
      key: readability-identifier-naming.ConstexprVariableCase,
      value: CamelCase,
    }
  - { key: readability-identifier-naming.ConstexprVariablePrefix, value: k }
  - { key: readability-identifier-naming.EnumCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumPrefix, value: E }
  - { key: readability-identifier-naming.EnumConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.FunctionCase, value: camelBack }
  - { key: readability-identifier-naming.GlobalConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.GlobalConstantPrefix, value: k }
  - { key: readability-identifier-naming.IgnoreMainLikeFunctions, value: true }
  - { key: readability-identifier-naming.MemberCase, value: camelBack }
  - { key: readability-identifier-naming.MemberConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.MemberConstantPrefix, value: k }
  - { key: readability-identifier-naming.MethodCase, value: aNy_CasE }
  - { key: readability-identifier-naming.NamespaceCase, value: CamelCase }
  - { key: readability-identifier-naming.ParameterCase, value: camelBack }
  - { key: readability-identifier-naming.PrivateMemberCase, value: camelBack }
  - { key: readability-identifier-naming.ProtectedMemberCase, value: camelBack }
  - { key: readability-identifier-naming.ClassMemberCase, value: camelBack }
  - { key: readability-identifier-naming.StaticConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.StaticConstantPrefix, value: k }
  - { key: readability-identifier-naming.StructCase, value: camelBack }
  - { key: readability-identifier-naming.TypedefCase, value: CamelCase }
  - { key: readability-identifier-naming.TypeAliasCase, value: CamelCase }
  - { key: readability-identifier-naming.VariableCase, value: camelBack }
  # modernize
  - { key: modernize-loop-convert.MinConfidence, value: reasonable }
  - { key: modernize-loop-convert.NamingStyle, value: lower_case }
  - { key: modernize-pass-by-value.IncludeStyle, value: google }
  - { key: modernize-replace-auto-ptr.IncludeStyle, value: google }
  - { key: modernize-use-nullptr.NullMacros, value: "NULL" }
